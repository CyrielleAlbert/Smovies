[{"D:\\smovies\\src\\index.js":"1","D:\\smovies\\src\\reportWebVitals.js":"2","D:\\smovies\\src\\App.js":"3","D:\\smovies\\src\\Playground.jsx":"4","D:\\smovies\\src\\Pages\\Discovery.jsx":"5","D:\\smovies\\src\\Pages\\404.jsx":"6","D:\\smovies\\src\\Pages\\Feed.jsx":"7","D:\\smovies\\src\\Pages\\Board.jsx":"8","D:\\smovies\\src\\Pages\\Login.jsx":"9","D:\\smovies\\src\\Pages\\Signup.jsx":"10","D:\\smovies\\src\\Pages\\Home.jsx":"11","D:\\smovies\\src\\Pages\\MyBoards.jsx":"12","D:\\smovies\\src\\services\\firebase.js":"13","D:\\smovies\\src\\reusable-components\\Header.js":"14","D:\\smovies\\src\\reusable-components\\MovieView.js":"15","D:\\smovies\\src\\helpers\\auth.js":"16","D:\\smovies\\src\\helpers\\movieDatabase.js":"17","D:\\smovies\\src\\reusable-components\\MovieInfoModal.js":"18","D:\\smovies\\src\\helpers\\database.js":"19","D:\\smovies\\src\\reusable-components\\CreateBoardModal.js":"20","D:\\smovies\\src\\reusable-components\\BoardView.js":"21","D:\\smovies\\src\\Pages\\MyAccount.jsx":"22","D:\\smovies\\src\\reusable-components\\ActorView.js":"23","D:\\smovies\\src\\tools\\stringSearch.js":"24"},{"size":500,"mtime":1608622248567,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1607255943090,"results":"27","hashOfConfig":"26"},{"size":2856,"mtime":1611344058822,"results":"28","hashOfConfig":"26"},{"size":297,"mtime":1609520771249,"results":"29","hashOfConfig":"26"},{"size":20773,"mtime":1611917848512,"results":"30","hashOfConfig":"26"},{"size":577,"mtime":1609520578776,"results":"31","hashOfConfig":"26"},{"size":716,"mtime":1609520771201,"results":"32","hashOfConfig":"26"},{"size":14302,"mtime":1611827485471,"results":"33","hashOfConfig":"26"},{"size":8706,"mtime":1611753974234,"results":"34","hashOfConfig":"26"},{"size":4592,"mtime":1609520771247,"results":"35","hashOfConfig":"26"},{"size":1894,"mtime":1609520771219,"results":"36","hashOfConfig":"26"},{"size":4994,"mtime":1611519220604,"results":"37","hashOfConfig":"26"},{"size":362,"mtime":1609520771258,"results":"38","hashOfConfig":"26"},{"size":3150,"mtime":1611830274895,"results":"39","hashOfConfig":"26"},{"size":1498,"mtime":1611317880252,"results":"40","hashOfConfig":"26"},{"size":550,"mtime":1611737873732,"results":"41","hashOfConfig":"26"},{"size":1782,"mtime":1611824610170,"results":"42","hashOfConfig":"26"},{"size":6108,"mtime":1611827482940,"results":"43","hashOfConfig":"26"},{"size":4152,"mtime":1611832691944,"results":"44","hashOfConfig":"26"},{"size":6867,"mtime":1611822397212,"results":"45","hashOfConfig":"26"},{"size":2086,"mtime":1611520964751,"results":"46","hashOfConfig":"26"},{"size":1088,"mtime":1611344879492,"results":"47","hashOfConfig":"26"},{"size":1309,"mtime":1611825046627,"results":"48","hashOfConfig":"26"},{"size":1279,"mtime":1611863409378,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1krxqvo",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"52"},"D:\\smovies\\src\\index.js",[],["115","116"],"D:\\smovies\\src\\reportWebVitals.js",[],"D:\\smovies\\src\\App.js",[],"D:\\smovies\\src\\Playground.jsx",[],"D:\\smovies\\src\\Pages\\Discovery.jsx",["117","118","119","120","121","122","123","124"],"import React, { Component, useEffect } from 'react'\r\nimport Header from './../reusable-components/Header.js'\r\nimport BoardView from '../reusable-components/BoardView.js'\r\nimport { auth, database } from './../services/firebase.js'\r\nimport Movie from './../reusable-components/MovieView.js'\r\nimport MovieInfoModal from './../reusable-components/MovieInfoModal.js'\r\nimport ReactLoading from 'react-loading'\r\nimport { getUserBoards, addMovieToBoard, getAllBoards } from '../helpers/database.js'\r\nimport { getBoardPosters } from './../helpers/movieDatabase.js'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { damerauLevenshteinDistance } from '../tools/stringSearch.js'\r\n\r\nconst axios = require('axios')\r\n\r\nclass Discovery extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      toggleBM: {\r\n        type: 'movies',\r\n        colors: ['#D40000', '#525252'],\r\n      },\r\n      allBoardsLoaded: false,\r\n      allBoards: {},\r\n      loading: false,\r\n      searchText: '',\r\n      loaded: false,\r\n      boards: [],\r\n      user: auth().currentUser,\r\n      userBoards: {},\r\n      search: false,\r\n      searchResults: [],\r\n      discoverMovies: {},\r\n      searchBoardResults: [],\r\n      modalMovieIsOpen: false,\r\n      modalMovie: {\r\n        movieId: null,\r\n        poster_path: null,\r\n        title: null,\r\n        synopsis: null,\r\n        voteAverage: null,\r\n        cast: null,\r\n        productionCompanies: null,\r\n        productionCountries: null,\r\n        releaseDate: null,\r\n      },\r\n    }\r\n  }\r\n\r\n\r\n  callback = (dbBoards) => {\r\n    if (dbBoards != null) {\r\n      Object.keys(dbBoards).forEach(async (boardId) => {\r\n        var posters = {}\r\n        await getBoardPosters(dbBoards[boardId].movies).then((posters_path) => {\r\n          posters = posters_path\r\n          dbBoards[boardId]['posters'] = posters\r\n          this.setState({ allBoards: dbBoards, allBoardsLoaded: true })\r\n        })\r\n      })\r\n    } else {\r\n      this.setState({ allBoards: {}, allBoardsLoaded: true })\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    getAllBoards(this.callback)\r\n    try {\r\n      await this.discoverMovie()\r\n      await getUserBoards((userBoards) => {\r\n        if (userBoards != null) {\r\n          this.setState({ userBoards: userBoards })\r\n        }\r\n      })\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the info of the movie and open the modal\r\n   * @param {Integer} id \r\n   */\r\n  openModal = async (id) => {\r\n    try {\r\n      await this.getMovieInfo(id)\r\n      this.setState({ modalMovieIsOpen: true })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the information of the movie corresponding to the id\r\n   * @param {Integer} id \r\n   */\r\n  getMovieInfo = async (id) => {\r\n    try {\r\n      const movieInfo = await axios.get('https://api.themoviedb.org/3/movie/' + id, {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n        },\r\n      })\r\n      const castInfo = await axios.get('https://api.themoviedb.org/3/movie/' + id + '/credits', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n        }\r\n      })\r\n      const modalInfo = {\r\n        movieId: id,\r\n        title: movieInfo.data.original_title,\r\n        poster_path: movieInfo.data.poster_path,\r\n        synopsis: movieInfo.data.overview,\r\n        voteAverage: movieInfo.data.vote_average,\r\n        cast: castInfo.data.cast,\r\n        productionCompanies: movieInfo.data.production_companies,\r\n        productionCountries: movieInfo.data.production_countries,\r\n        releaseDate: movieInfo.data.release_date\r\n      }\r\n      this.setState({ modalMovie: modalInfo })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  discoverMovie = async () => {\r\n    try {\r\n      const weeklyTrend = await axios.get('https://api.themoviedb.org/3/trending/movie/week', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Movies of the week': weeklyTrend.data.results } })\r\n      const dailyTrend = await axios.get('https://api.themoviedb.org/3/trending/movie/day', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Movies of the day': dailyTrend.data.results } })\r\n\r\n      const movies2020 = await axios.get('https://api.themoviedb.org/3/discover/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          sort_by: 'popularity.desc',\r\n          include_adult: false,\r\n          include_video: false,\r\n          year: 2020,\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, \"Best of 2020\": movies2020.data.results } })\r\n      const popular = await axios.get('https://api.themoviedb.org/3/movie/popular', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Popular': popular.data.results } })\r\n      const topRated = await axios.get('https://api.themoviedb.org/3/movie/top_rated', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Top rated': topRated.data.results } })\r\n      const upcoming = await axios.get('https://api.themoviedb.org/3/movie/upcoming', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Recent': upcoming.data.results } })\r\n      const actionMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          sort_by: 'vote_count.desc',\r\n          include_video: false,\r\n          with_genres: 28\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Action': actionMovies.data.results } })\r\n      const adventureMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          sort_by: 'vote_count.desc',\r\n          include_video: false,\r\n          with_genres: 12\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Adventure': adventureMovies.data.results } })\r\n      const comedyMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          sort_by: 'vote_count.desc',\r\n          include_video: false,\r\n          with_genres: 35\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Comedy': comedyMovies.data.results } })\r\n      const crimeMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          sort_by: 'vote_count.desc',\r\n          include_video: false,\r\n          with_genres: 80\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Crime': crimeMovies.data.results } })\r\n      const westernMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          sort_by: 'vote_count.desc',\r\n          include_video: false,\r\n          with_genres: 37\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Western': westernMovies.data.results } })\r\n      const scifiMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          sort_by: 'popularity.desc',\r\n          include_video: false,\r\n          with_genres: 878\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Science fiction': scifiMovies.data.results } })\r\n      const historyMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          sort_by: 'popularity.desc',\r\n          include_video: false,\r\n          with_genres: 36\r\n        },\r\n      })\r\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'History': historyMovies.data.results } })\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store the text for search\r\n   * @param {*} event\r\n   */\r\n  changeSearch = (event) => {\r\n    this.setState({ searchText: event.target.value })\r\n  }\r\n\r\n  /**\r\n   * Find a movie in the Movie database\r\n   */\r\n  searchMovie = async () => {\r\n    try {\r\n      const movies = await axios.get('https://api.themoviedb.org/3/search/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          query: this.state.searchText,\r\n        },\r\n      })\r\n      this.setState({ loaded: true, searchResults: movies.data.results, loading: false })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n  searchBoard = async () => {\r\n    var searchString = this.state.searchText.toLocaleLowerCase('en-US')\r\n    var results = {}\r\n    Object.keys(this.state.allBoards).forEach((key) => {\r\n      var DLdistance = damerauLevenshteinDistance(searchString, this.state.allBoards[key].title)\r\n      if (this.state.allBoards[key].title.toLocaleLowerCase('en-US').includes(searchString)) {\r\n        results[key] = { ...this.state.allBoards[key], included: true, DLdistance: DLdistance }\r\n      } else if (searchString.includes(this.state.allBoards[key].title.toLocaleLowerCase('en-US'))) {\r\n        results[key] = { ...this.state.allBoards[key], included: true, DLdistance: DLdistance }\r\n      } else {\r\n        if (DLdistance < 5) {\r\n          results[key] = { ...this.state.allBoards[key], included: false, DLdistance: DLdistance }\r\n        }\r\n      }\r\n    })\r\n    console.log(results)\r\n    this.setState({ loaded: true, searchBoardResults: results, loading: false })\r\n\r\n  }\r\n\r\n  /**\r\n   * Handle the search of movies or boards.\r\n   * @param {*} event\r\n   */\r\n  handleSearch = async (event) => {\r\n    if (event.key === 'Enter') {\r\n      if (this.state.toggleBM.type == 'movies') {\r\n        this.setState({ search: true, loading: true })\r\n        await this.searchMovie()\r\n      } else {\r\n        this.setState({ search: true, loading: true })\r\n        await this.searchBoard()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change between type of discovery\r\n   */\r\n  toggleBoardsMovies = () => {\r\n    if (this.state.toggleBM.type == 'movies') {\r\n      this.setState({\r\n        toggleBM: {\r\n          type: 'boards',\r\n          colors: ['#525252', '#D40000'],\r\n        },\r\n      })\r\n    } else {\r\n      this.setState({\r\n        toggleBM: {\r\n          type: 'movies',\r\n          colors: ['#D40000', '#525252'],\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: '#414141',\r\n          minHeight: window.innerHeight,\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <Header></Header>\r\n        <MovieInfoModal\r\n          cast={this.state.modalMovie.cast}\r\n          productionCompanies={this.state.modalMovie.productionCompanies}\r\n          productionCountries={this.state.modalMovie.productionCountries}\r\n          releaseDate={this.state.modalMovie.releaseDate}\r\n          movieId={this.state.modalMovie.movieId ? this.state.modalMovie.movieId : 0}\r\n          popOver={true}\r\n          userBoards={this.state.userBoards}\r\n          title={this.state.modalMovie.title}\r\n          posterPath={this.state.modalMovie.poster_path}\r\n          synopsis={this.state.modalMovie.synopsis}\r\n          addToBoard={(boardId, movieId) => {\r\n            addMovieToBoard(boardId, parseInt(movieId))\r\n          }}\r\n          closeModal={() => {\r\n            this.setState({ modalMovieIsOpen: false })\r\n          }}\r\n          isModalOpen={this.state.modalMovieIsOpen}\r\n        ></MovieInfoModal>\r\n        <div\r\n          style={{\r\n            paddingTop: 100,\r\n            color: '#4D4D4D',\r\n            fontSize: 20,\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ flexDirection: 'row', display: 'flex', paddingTop: 0, color: 'white', fontSize: 30 }}>\r\n            <div style={{ width: '33%', verticalAlign: 'center' }}>\r\n              <div\r\n                style={{\r\n                  flexDirection: 'row',\r\n                  display: 'flex',\r\n                  width: 200,\r\n                  height: 30,\r\n                  fontSize: 20,\r\n                  fontWeight: 'normal',\r\n                  marginLeft: '5%',\r\n                }}\r\n              >\r\n                <div\r\n                  onClick={this.toggleBoardsMovies}\r\n                  style={{ width: '50%', backgroundColor: this.state.toggleBM.colors[0] }}\r\n                >\r\n                  Movies\r\n                </div>\r\n                <div\r\n                  onClick={this.toggleBoardsMovies}\r\n                  style={{ width: '50%', backgroundColor: this.state.toggleBM.colors[1] }}\r\n                >\r\n                  Boards\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div\r\n              style={{ width: '33%', fontWeight: 'bold', letterSpacing: '0.2em' }}\r\n              onClick={() => this.setState({ search: false, searchText: '' })}\r\n            >\r\n              Discover\r\n            </div>\r\n            <div style={{ width: '33%', textAlign: 'right', paddingRight: '5%' }}>\r\n              <input\r\n                style={{\r\n                  width: '50%',\r\n                  backgroundColor: '#525252',\r\n                  color: 'white',\r\n                  fontFamily: 'Poppins',\r\n                  borderWidth: 0,\r\n                  borderRadius: 24,\r\n                  outline: 'none',\r\n                  padding: 5,\r\n                }}\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n                value={this.state.searchText}\r\n                onChange={this.changeSearch}\r\n                onKeyDown={this.handleSearch}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.state.loading && (\r\n          <div style={{ paddingLeft: '45%' }}>\r\n            <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\r\n          </div>\r\n        )}\r\n\r\n        {/* \r\n        * Movies discovery\r\n        */}\r\n\r\n        {!this.state.search && this.state.toggleBM.type == \"movies\" &&\r\n          Object.keys(this.state.discoverMovies).map((category, i) => {\r\n            return (\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  flexDirection: 'row',\r\n                  alignItems: 'center',\r\n                  flexWrap: 'nowrap',\r\n                  overflowX: 'auto',\r\n                  padding: 10,\r\n                  backgroundColor: '#4D4D4D',\r\n                  marginTop: 50,\r\n                }}\r\n              >\r\n                {this.state.discoverMovies[category].map((movie, index) => {\r\n                  return (\r\n                    <div style={{ margin: 10 }} onClick={() => this.openModal(movie.id)}>\r\n                      <Movie\r\n                        title={movie.title}\r\n                        voteAverage={movie.vote_average}\r\n                        posterPath={movie.poster_path}\r\n                      ></Movie>\r\n                    </div>\r\n                  )\r\n                })}\r\n                <div\r\n                  style={{\r\n                    position: 'absolute',\r\n                    top: 178 + i * 316,\r\n                    left: 20,\r\n                    color: '#8C8C8C',\r\n                    fontFamily: 'Poppins',\r\n                    fontWeight: 'bolder',\r\n                    fontSize: 20,\r\n                  }}\r\n                >\r\n                  {category}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n\r\n\r\n        {/*\r\n        * Board discovery\r\n        */}\r\n\r\n        {!this.state.search && this.state.toggleBM.type != \"movies\" &&\r\n          <div>\r\n            <div style={{\r\n              position: 'absolute',\r\n              top: 178,\r\n              left: 20,\r\n              color: '#8C8C8C',\r\n              fontFamily: 'Poppins',\r\n              fontWeight: 'bolder',\r\n              fontSize: 20,\r\n\r\n            }}>All boards</div>\r\n            <div style={{\r\n              width: 'auto',\r\n              flexWrap: 'wrap',\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              backgroundColor: '#4D4D4D',\r\n              padding: 20,\r\n              marginTop: 50,\r\n            }}>\r\n              {!this.state.allBoardsLoaded &&\r\n                <div style={{ paddingLeft: '45%' }}>\r\n                  <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\r\n                </div>}\r\n              {this.state.allBoardsLoaded &&\r\n\r\n                Object.keys(this.state.allBoards).map((boardId) => {\r\n                  return (\r\n                    <NavLink\r\n                      to={{\r\n                        pathname: \"/board/\" + boardId,\r\n                        aboutProps: { state: { boardInfo: this.state.allBoards[boardId] } }\r\n                      }}\r\n\r\n                      style={{ textDecoration: \"none\" }}\r\n                    >\r\n                      <div style={{\r\n                        margin: 10,\r\n                      }} key={boardId}>\r\n                        <BoardView\r\n                          name={this.state.allBoards[boardId].title}\r\n                          nStars={this.state.allBoards[boardId].nStars}\r\n                          postersPath={this.state.allBoards[boardId].posters}\r\n                        ></BoardView>\r\n                      </div>\r\n                    </NavLink>\r\n                  )\r\n                })}\r\n            </div>\r\n          </div>}\r\n\r\n\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            flexWrap: 'nowrap',\r\n            overflowX: 'auto',\r\n            padding: 10,\r\n            backgroundColor: '#4D4D4D',\r\n            marginTop: 50,\r\n          }}\r\n        >\r\n          {!this.state.loading &&\r\n            this.state.search &&\r\n            this.state.loaded &&\r\n            this.state.toggleBM.type == \"movies\" &&\r\n            this.state.searchResults.length > 0 &&\r\n            this.state.searchResults.map((movie, index) => {\r\n              console.log(\"hello\")\r\n              return (\r\n                <div style={{ margin: 10 }} onClick={() => this.openModal(movie.id)}>\r\n                  <Movie\r\n                    title={movie.title}\r\n                    voteAverage={movie.vote_average}\r\n                    posterPath={movie.poster_path}\r\n                  ></Movie>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n\r\n          {!this.state.loading &&\r\n            this.state.search &&\r\n            this.state.loaded &&\r\n            this.state.toggleBM.type != \"movies\" &&\r\n            Object.keys(this.state.searchBoardResults).length > 0 &&\r\n            Object.keys(this.state.searchBoardResults).map((boardId, index) => {\r\n              return (\r\n                <NavLink\r\n                  to={{\r\n                    pathname: \"/board/\" + boardId,\r\n                    aboutProps: { state: { boardInfo: this.state.searchBoardResults[boardId] } }\r\n                  }}\r\n\r\n                  style={{ textDecoration: \"none\" }}\r\n                >\r\n                  <div style={{\r\n                    margin: 10,\r\n                  }} key={boardId}>\r\n                    <BoardView\r\n                      name={this.state.searchBoardResults[boardId].title}\r\n                      nStars={this.state.searchBoardResults[boardId].nStars}\r\n                      postersPath={this.state.searchBoardResults[boardId].posters}\r\n                    ></BoardView>\r\n                  </div>\r\n                </NavLink>\r\n              )\r\n            })}\r\n        </div >\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Discovery\r\n","D:\\smovies\\src\\Pages\\404.jsx",[],"D:\\smovies\\src\\Pages\\Feed.jsx",["125"],"import React, { Component } from 'react'\r\nimport Header from '../reusable-components/Header.js'\r\n\r\nclass Feed extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  componentDidMount() {}\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: '#414141',\r\n          height: window.innerHeight,\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <Header></Header>\r\n        <div\r\n          style={{\r\n            paddingTop: 250,\r\n            color: '#4D4D4D',\r\n            fontSize: 60,\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          Feed is coming in the next update...\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Feed\r\n","D:\\smovies\\src\\Pages\\Board.jsx",["126","127","128"],"import React, { Component } from 'react'\r\nimport { getBoardPosters, getMoviesInfo } from '../helpers/movieDatabase.js'\r\nimport BoardView from '../reusable-components/BoardView.js'\r\nimport Movie from '../reusable-components/MovieView.js'\r\nimport Header from './../reusable-components/Header.js'\r\nimport { auth, database } from './../services/firebase.js'\r\nimport MovieInfoModal from './../reusable-components/MovieInfoModal.js'\r\nimport ReactLoading from 'react-loading'\r\nimport { addMovieToBoard, removeMovieFromBoard } from '../helpers/database.js'\r\nimport Toggle from \"react-toggle\"\r\nimport \"react-toggle/style.css\"\r\n\r\nconst axios = require('axios')\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      edit: false,\r\n      boardId: null,\r\n      boardInfo: {},\r\n      moviesInfo: {},\r\n      loaded: false,\r\n      modalMovieIsOpen: false,\r\n      modalMovieInfo: {\r\n        poster_path: null,\r\n        title: null,\r\n        synopsis: null,\r\n        voteAverage: null,\r\n        movieId: null,\r\n        cast: null,\r\n        productionCompanies:null,\r\n        productionCountries:null,\r\n        releaseDate:null,\r\n      },\r\n      searchText: '',\r\n      searchResults: [],\r\n      searchLoaded: false,\r\n      searchLoading: false,\r\n      searchResultsAdded: {},\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ boardId: this.props.match.params.id })\r\n    this.getBoardInfo()\r\n  }\r\n\r\n  getBoardInfo = async () => {\r\n    database.ref(`boards/${this.props.match.params.id}`).on('value', (snapshot) => {\r\n      this.setState({ boardInfo: snapshot.val() })\r\n      var movies = snapshot.val().movies\r\n      getBoardPosters(movies).then((posters_path) => {\r\n        var boardPosters = { boardPosters: posters_path }\r\n        this.setState({ boardInfo: { ...this.state.boardInfo, ...boardPosters } })\r\n        getMoviesInfo(movies).then((moviesInfo) => {\r\n          this.setState({ moviesInfo: { ...moviesInfo, }, loaded: true })\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  openModal = async (id, type, movieInfo = null) => {\r\n    if (type == \"inBoard\") {\r\n      this.setState({ modalMovieInfo: { ...this.state.moviesInfo[id], movieId: id }, modalMovieIsOpen: true })\r\n    } else if (type == \"search\") {\r\n      this.setState({ modalMovieInfo: { ...movieInfo, movieId: id }, modalMovieIsOpen: true })\r\n    } else {\r\n      console.log(\"Wrong type\")\r\n    }\r\n  }\r\n\r\n  changeSearch = (event) => {\r\n    this.setState({ searchText: event.target.value })\r\n  }\r\n\r\n  /**\r\n   * Find a movie in the Movie database\r\n   */\r\n  searchMovie = async () => {\r\n    try {\r\n      const movies = await axios.get('https://api.themoviedb.org/3/search/movie', {\r\n        params: {\r\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\r\n          language: 'en_US',\r\n          query: this.state.searchText,\r\n        },\r\n      })\r\n      var searchMoviesTemp = {}\r\n      for (var movie of movies.data.results) {\r\n        searchMoviesTemp[movie.id] = false\r\n      }\r\n      this.setState({ searchLoaded: true, searchResults: movies.data.results, searchLoading: false, searchResultsAdded: searchMoviesTemp })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the search of movies or boards.\r\n   * @param {*} event\r\n   */\r\n  handleSearch = async (event) => {\r\n    if (event.key === 'Enter') {\r\n      this.setState({ searchLoading: true })\r\n      await this.searchMovie()\r\n    }\r\n  }\r\n\r\n  addMovie = (movieId) => {\r\n    if (movieId != null) {\r\n      if (this.state.boardInfo.movies.includes(movieId)) {\r\n        console.log(\"Already in the list\")\r\n        this.setState({ searchResultsAdded: { ...this.state.searchResultsAdded, [movieId]: true } })\r\n      } else {\r\n        addMovieToBoard(this.props.match.params.id, movieId)\r\n        console.log(\"Added to the list!\")\r\n        this.setState({ searchResultsAdded: { ...this.state.searchResultsAdded, [movieId]: true } })\r\n      }\r\n    } else {\r\n      console.log('MovieId null')\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: '#414141',\r\n          minHeight: window.innerHeight,\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <Header></Header>\r\n        <MovieInfoModal\r\n          cast={this.state.modalMovieInfo.cast}\r\n          productionCompanies={this.state.modalMovieInfo.productionCompanies}\r\n          productionCountries={this.state.modalMovieInfo.productionCountries}\r\n          releaseDate={this.state.modalMovieInfo.releaseDate}\r\n          title={this.state.modalMovieInfo.title}\r\n          posterPath={this.state.modalMovieInfo.poster}\r\n          synopsis={this.state.modalMovieInfo.synopsis}\r\n          addToBoard={() => {\r\n            this.addMovie(this.state.modalMovieInfo.movieId)\r\n          }}\r\n          closeModal={() => {\r\n            this.setState({ modalMovieIsOpen: false })\r\n          }}\r\n          isModalOpen={this.state.modalMovieIsOpen}\r\n        ></MovieInfoModal>\r\n        <div style={{ paddingTop: 100 }}></div>\r\n        {!this.state.loaded &&\r\n          <div style={{ paddingLeft: '45%' }}>\r\n            <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\r\n          </div>\r\n        }\r\n        {this.state.loaded &&\r\n          <div>\r\n            <div style={{\r\n              margin: 20,\r\n              flexDirection: 'row',\r\n              display: \"flex\"\r\n            }}>\r\n              <div\r\n                style={{\r\n                  width: 400,\r\n                  marginLeft: 100,\r\n                }}>\r\n                <BoardView\r\n                  name={this.state.boardInfo.title}\r\n                  nStars={this.state.boardInfo.nStars}\r\n                  postersPath={this.state.boardInfo.boardPosters}\r\n                  hideBanner={true}\r\n                  width={156 * 2}\r\n                  height={210 * 2}\r\n                  filter={\"drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25))\"}\r\n                  zIndec={2}></BoardView>\r\n              </div>\r\n              <div style={{\r\n                width: 900,\r\n                fontFamily: 'Poppins',\r\n                color: '#D4D4D4',\r\n                fontSize: 15,\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: 'bolder',\r\n                  fontSize: 30,\r\n                  color: 'white',\r\n                  textAlign: 'left'\r\n                }}>{this.state.boardInfo.title}</div>\r\n                <div style={{\r\n                  fontFamily: 'Poppins',\r\n                  fontWeight: 'normal',\r\n                  textAlign: 'left'\r\n                }}>Created by: user#{this.state.boardInfo.createdBy.slice(-5)}</div>\r\n                <div style={{ height: 250, width: '100%', color: '#7C7C7C', paddingTop: 20 }}>Description not available</div>\r\n                <div style={{ flexDirection: 'row', display: 'flex', }}>\r\n                  <div style={{ width: '15%' }}>{this.state.boardInfo.movies.length} movies </div>\r\n                  <div style={{ width: '15%' }}>{this.state.boardInfo.nStars} stars </div>\r\n                  <div style={{ width: '20%' }}> Last update: {(\"0\" + new Date(this.state.boardInfo.lastUpdate).getDate()).slice(-2)}/{(\"0\" + new Date(this.state.boardInfo.lastUpdate).getMonth() + 1).slice(-2)}/{new Date(this.state.boardInfo.lastUpdate).getFullYear()}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div style={{\r\n                display: 'flex',\r\n                flexDirection: \"row\"\r\n              }}>\r\n                <div style={{\r\n                  width: \"85%\",\r\n                  textAlign: 'left',\r\n                  color: '#8C8C8C',\r\n                  fontFamily: 'Poppins',\r\n                  fontWeight: 'bolder',\r\n                  fontSize: 20,\r\n                  margin: 20\r\n                }}>Movies</div>\r\n                <div style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  width: \"5%\",\r\n                  color: '#8C8C8C',\r\n                  fontFamily: 'Poppins',\r\n                  fontWeight: 'normal',\r\n                  textDecoration: '#8C8C8C underline',\r\n                  fontSize: 20,\r\n                  textAlign: 'right',\r\n                }}>Edit</div>\r\n                <div style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  width: '10%',\r\n                  textAlign: 'left',\r\n                }}>\r\n                  <Toggle\r\n                    defaultChecked={this.state.edit}\r\n                    onChange={() => { this.setState({ edit: !this.state.edit }) }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div style={{\r\n                width: 'auto',\r\n                flexWrap: 'wrap',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                backgroundColor: '#4D4D4D',\r\n                padding: 20\r\n              }}>\r\n                {Object.keys(this.state.moviesInfo).map((movieId) => {\r\n                  return (\r\n                    <div>\r\n                      <div style={{ margin: 10 }} onClick={() => this.openModal(movieId, \"inBoard\")}>\r\n                        <Movie\r\n                          title={this.state.moviesInfo[movieId].title}\r\n                          voteAverage={this.state.moviesInfo[movieId].vote_average}\r\n                          posterPath={this.state.moviesInfo[movieId].poster}\r\n                        ></Movie>\r\n                      </div>\r\n                      {this.state.edit &&\r\n                        <div\r\n                          style={{\r\n                            margin: 10,\r\n                            marginLeft: '25%',\r\n                            color: \"white\",\r\n                            fontFamily: 'Poppins',\r\n                            fontSize: 15,\r\n                            textAlign: \"center\",\r\n                            width: '50%',\r\n                            textDecoration: \"white underline\"\r\n                          }}\r\n                          onClick={() => { removeMovieFromBoard(this.state.boardId, movieId) }}>\r\n                          Remove\r\n                        </div>}\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: 50 }}>\r\n                <div style={{\r\n                  width: 1200,\r\n                  color: '#8C8C8C',\r\n                  fontFamily: 'Poppins',\r\n                  fontWeight: 'bolder',\r\n                  fontSize: 20,\r\n                  margin: 20,\r\n                  marginBottom: 0\r\n                }}>Add to the board: </div>\r\n                <div style={{\r\n                  width: 200,\r\n                  margin: 20,\r\n                  marginBottom: 0\r\n                }}>\r\n                  <input\r\n                    style={{\r\n                      backgroundColor: '#525252',\r\n                      color: 'white',\r\n                      fontFamily: 'Poppins',\r\n                      borderWidth: 0,\r\n                      borderRadius: 24,\r\n                      outline: 'none',\r\n                      padding: 5,\r\n                    }}\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    value={this.state.searchText}\r\n                    onChange={this.changeSearch}\r\n                    onKeyDown={this.handleSearch}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {this.state.searchLoading && (\r\n                <div style={{ paddingLeft: '45%' }}>\r\n                  <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\r\n                </div>\r\n              )}\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  flexDirection: 'row',\r\n                  alignItems: 'center',\r\n                  flexWrap: 'nowrap',\r\n                  overflowX: 'auto',\r\n                  padding: 10,\r\n                  backgroundColor: '#4D4D4D',\r\n                  marginTop: 20,\r\n                }}\r\n              >\r\n                {!this.state.searchLoaded &&\r\n                  <div style={{ minHeight: 210 }}></div>}\r\n                {!this.state.searchLoading &&\r\n                  this.state.searchLoaded &&\r\n                  this.state.searchResults.length > 0 &&\r\n                  this.state.searchResults.map((movie, index) => {\r\n                    return (\r\n                      <div style={{ margin: 10 }} onClick={() => {\r\n                        this.openModal(movie.id, \"search\",\r\n                          {\r\n                            title: movie.title,\r\n                            vote_average: movie.vote_average,\r\n                            poster: movie.poster_path,\r\n                            synopsis: movie.overview\r\n                          })\r\n                      }}>\r\n                        <Movie\r\n                          title={movie.title}\r\n                          voteAverage={movie.vote_average}\r\n                          posterPath={movie.poster_path}\r\n                        ></Movie>\r\n                        {this.state.searchResultsAdded[movie.id] &&\r\n                          <div style={{\r\n                            backgroundColor: \"#D40000\",\r\n                            position: \"relative\",\r\n                            top: -200,\r\n                            left: 10,\r\n                            padding: 5,\r\n                            fontSize: 10,\r\n                            textAlign: \"center\",\r\n                            width: \"30%\",\r\n                            borderRadius: 14,\r\n                            margin: 0,\r\n                            color: 'white',\r\n                            fontFamily: \"Poppins\"\r\n                          }}>\r\n                            Added ✓</div>}\r\n                      </div>\r\n                    )\r\n                  })}\r\n              </div>\r\n            </div>\r\n          </div>}\r\n        <div style={{ width: \"auto\", height: 100, paddingTop: 40, color: \"#D4D4D4\", fontFamily: \"Poppins\", fontSize: 15, textAlign: \"center\" }}> Smovies Copyright 2021 ©</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Board\r\n","D:\\smovies\\src\\Pages\\Login.jsx",["129","130"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { signin, sendPasswordReset } from '../helpers/auth.js'\r\nimport { updateUser } from '../helpers/database.js'\r\nimport { auth } from '../services/firebase.js'\r\nimport Modal from 'react-modal'\r\n\r\n\r\nfunction utcTimestampToDateString(timestamp) {\r\n  try {\r\n    // Convert to date object.\r\n    const date = new Date(Number(timestamp));\r\n    // Test date is valid.\r\n    if (!isNaN(date.getTime())) {\r\n      // Convert to UTC date string.\r\n      return date.toUTCString();\r\n    }\r\n  } catch (e) {\r\n    // Do nothing. undefined will be returned.\r\n  }\r\n  return undefined;\r\n}\r\n\r\nexport default class Login extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      error: null,\r\n      email: '',\r\n      password: '',\r\n      loading: false,\r\n      resetEmailSent: false,\r\n      isModalOpen: false,\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.user = auth().currentUser\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    })\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    this.setState({ loading: true })\r\n    event.preventDefault()\r\n    this.setState({ error: '' })\r\n    try {\r\n      await signin(this.state.email, this.state.password)\r\n      await updateUser({ lastConnection: utcTimestampToDateString(Date.now()) })\r\n    } catch (error) {\r\n      this.setState({ error: error.message })\r\n    }\r\n  }\r\n  closeModal = () => {\r\n    this.setState({ isModalOpen: false })\r\n  }\r\n  resetPassword = (email) => {\r\n    sendPasswordReset(email, () => {\r\n      this.setState({ resetEmailSent: true })\r\n      //setTimeout(() => { this.setState({ resetEmailSent: false }), 20000 })\r\n    },\r\n      (error) => { console.log(error) }\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: '#414141',\r\n          height: window.innerHeight,\r\n          position: 'relative',\r\n          width: '100%',\r\n          fontFamily: 'Poppins',\r\n          backgroundImage: 'url(' + '/cinema.jpg' + ')',\r\n          backgroundPosition: 'center',\r\n          backgroundSize: 'cover',\r\n          backgroundRepeat: 'no-repeat',\r\n        }}\r\n      >\r\n        <Modal\r\n          isOpen={this.state.isModalOpen}\r\n          onRequestClose={this.closeModal}\r\n          style={{\r\n            overlay: { backgroundColor: 'rgba(65, 65, 65, 0.01)', backdropFilter: 'blur(10px)', },\r\n            content: {\r\n              left: null,\r\n              top: 90,\r\n              right: null,\r\n              bottom: null,\r\n              width: \"50%\",\r\n              marginLeft: '25%',\r\n              backgroundColor: '#DADADA',\r\n              boxShadow: '0px 0px 45px 25px rgba(0, 0, 0, 0.25)',\r\n              borderWidth: 0,\r\n              borderRadius: 24,\r\n            },\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              fontFamily: 'Poppins',\r\n              color: 'white',\r\n              textAlign: 'center',\r\n              padding: 25,\r\n\r\n            }}\r\n          >\r\n            <div style={{ fontSize: 32, color: \"black\", textAlign: 'center', fontWeight: \"bolder\" }}>Reset Password</div>\r\n            <div style={{ fontSize: 16, color: \"black\", textAlign: 'center', marginTop: 25 }}>Enter the email address associated with your account.</div>\r\n            <div>\r\n              <input\r\n                style={{\r\n                  marginTop: 25,\r\n                  width: '75%',\r\n                  backgroundColor: 'white',\r\n                  color: 'black',\r\n                  fontFamily: 'Poppins',\r\n                  borderWidth: 0,\r\n                  borderRadius: 24,\r\n                  outline: 'none',\r\n                  padding: 15,\r\n                }}\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                onChange={this.handleChange}\r\n                value={this.state.email}\r\n              ></input>\r\n            </div>\r\n            {!this.state.resetEmailSent &&\r\n              <div\r\n                onClick={() => {\r\n                  if (this.state.email != null) {\r\n                    this.resetPassword(this.state.email)\r\n                  } else {\r\n                    console.log(\"email null\")\r\n                  }\r\n                }}\r\n                style={{\r\n                  width: '50%',\r\n                  marginLeft: '25%',\r\n                  backgroundColor: '#D40000',\r\n                  fontSize: 20,\r\n                  borderWidth: 0,\r\n                  borderRadius: 24,\r\n                  padding: 5,\r\n                  marginTop: 50,\r\n                  marginBottom: 50,\r\n                  color: 'white',\r\n                  boxShadow: '0px 0px 10px grey',\r\n                }}\r\n              >\r\n                Reset password\r\n                    </div>}\r\n            {this.state.resetEmailSent &&\r\n              <div style={{\r\n                color: 'black',\r\n                fontSize: 15,\r\n                marginTop: 25,\r\n              }}>An email has been sent to your email address.</div>}\r\n            <div style={{ color: \"black\", textDecoration: \"black underline\" }} onClick={this.closeModal}>← Back to login</div>\r\n          </div>\r\n\r\n        </Modal>\r\n        <div\r\n          style={{\r\n            color: '#D40000',\r\n            fontSize: 50,\r\n            fontWeight: 'bolder',\r\n            letterSpacing: '0.2em',\r\n            alignItems: 'center',\r\n            paddingTop: 15,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          Smovies\r\n        </div>\r\n        <div\r\n          style={{\r\n            backgroundColor: '#DADADA',\r\n            width: '50%',\r\n            marginLeft: '25%',\r\n            padding: 25,\r\n            textAlign: 'center',\r\n            borderRadius: 24,\r\n          }}\r\n        >\r\n          <div>\r\n            <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\r\n              <h1>Login</h1>\r\n              <p>Fill in the form below to login to your account.</p>\r\n              <div>\r\n                <input\r\n                  style={{\r\n                    width: '75%',\r\n                    backgroundColor: 'white',\r\n                    color: 'black',\r\n                    fontFamily: 'Poppins',\r\n                    borderWidth: 0,\r\n                    borderRadius: 24,\r\n                    outline: 'none',\r\n                    padding: 15,\r\n                  }}\r\n                  placeholder=\"Email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.email}\r\n                ></input>\r\n              </div>\r\n              <div>\r\n                <input\r\n                  style={{\r\n                    marginTop: 25,\r\n                    width: '75%',\r\n                    backgroundColor: 'white',\r\n                    color: 'black',\r\n                    fontFamily: 'Poppins',\r\n                    borderWidth: 0,\r\n                    borderRadius: 24,\r\n                    outline: 'none',\r\n                    padding: 15,\r\n                  }}\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.password}\r\n                  type=\"password\"\r\n                ></input>\r\n              </div>\r\n              <div style={{ textDecoration: \"black underline\", marginTop:25 }} onClick={() => { this.setState({ isModalOpen: true }) }}>Forgot password?</div>\r\n              <div>\r\n                {this.state.error ? <p>{this.state.error}</p> : null}\r\n                {this.state.loading ? (\r\n                  <div marginTop={25}>Loading...</div>\r\n                ) : (\r\n                    <button\r\n                      style={{\r\n                        width: '20%',\r\n                        backgroundColor: '#D40000',\r\n                        fontSize: 30,\r\n                        borderWidth: 0,\r\n                        borderRadius: 24,\r\n                        padding: 5,\r\n                        marginTop: 25,\r\n                        marginBottom: 50,\r\n                        color: 'white',\r\n                        boxShadow: '0px 0px 10px grey',\r\n                      }}\r\n                    >\r\n                      Log in\r\n                    </button>\r\n                  )}\r\n              </div>\r\n              <p>\r\n                Don't have an account? <Link to=\"/signup\">Register</Link>\r\n              </p>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","D:\\smovies\\src\\Pages\\Signup.jsx",["131","132"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { signup } from '../helpers/auth'\r\nimport { createUser } from '../helpers/database'\r\nimport { auth } from '../services/firebase'\r\n\r\nexport default class SignUp extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      error: null,\r\n      email: '',\r\n      password: '',\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    })\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault()\r\n    this.setState({ error: '' })\r\n    try {\r\n      await signup(this.state.email, this.state.password).then(async() =>{ createUser(auth().currentUser)})\r\n      await auth().currentUser.sendEmailVerification()\r\n    } catch (error) {\r\n      this.setState({ error: error.message })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: '#414141',\r\n          height: window.innerHeight,\r\n          position: 'relative',\r\n          width: '100%',\r\n          fontFamily: 'Poppins',\r\n          backgroundImage: 'url(' + '/cinema.jpg' + ')',\r\n          backgroundPosition: 'center',\r\n          backgroundSize: 'cover',\r\n          backgroundRepeat: 'no-repeat',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            color: '#D40000',\r\n            fontSize: 50,\r\n            fontWeight: 'bolder',\r\n            letterSpacing: '0.2em',\r\n            alignItems: 'center',\r\n            paddingTop: 15,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          Smovies\r\n        </div>\r\n        <div\r\n          style={{\r\n            backgroundColor: '#DADADA',\r\n            width: '50%',\r\n            marginLeft: '25%',\r\n            padding: 25,\r\n            textAlign: 'center',\r\n            borderRadius: 24,\r\n          }}\r\n        >\r\n          <div>\r\n            <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\r\n              <h1>Register</h1>\r\n              <p>Fill in the form below to create your account.</p>\r\n              <div>\r\n                <input\r\n                  style={{\r\n                    width: '75%',\r\n                    backgroundColor: 'white',\r\n                    color: 'black',\r\n                    fontFamily: 'Poppins',\r\n                    borderWidth: 0,\r\n                    borderRadius: 24,\r\n                    outline: 'none',\r\n                    padding: 15,\r\n                  }}\r\n                  placeholder=\"Email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.email}\r\n                ></input>\r\n              </div>\r\n              <div>\r\n                <input\r\n                  style={{\r\n                    marginTop: 25,\r\n                    width: '75%',\r\n                    backgroundColor: 'white',\r\n                    color: 'black',\r\n                    fontFamily: 'Poppins',\r\n                    borderWidth: 0,\r\n                    borderRadius: 24,\r\n                    outline: 'none',\r\n                    padding: 15,\r\n                  }}\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.password}\r\n                  type=\"password\"\r\n                ></input>\r\n              </div>\r\n              <div>\r\n                {this.state.error ? <p>{this.state.error}</p> : null}\r\n                {this.state.loading ? (\r\n                  <div marginTop={25}>Loading...</div>\r\n                ) : (\r\n                  <button\r\n                    style={{\r\n                      width: '20%',\r\n                      backgroundColor: '#D40000',\r\n                      fontSize: 30,\r\n                      borderWidth: 0,\r\n                      borderRadius: 24,\r\n                      padding: 5,\r\n                      marginTop: 25,\r\n                      marginBottom: 50,\r\n                      color: 'white',\r\n                      boxShadow: '0px 0px 10px grey',\r\n                    }}\r\n                  >\r\n                    Sign up\r\n                  </button>\r\n                )}\r\n              </div>\r\n              <p>\r\n                Already have an account? <Link to=\"/login\">Log in</Link>\r\n              </p>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","D:\\smovies\\src\\Pages\\Home.jsx",["133","134","135"],"import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: '#414141',\r\n          height: window.innerHeight,\r\n          position: 'relative',\r\n          width: '100%',\r\n          fontFamily: 'Poppins',\r\n          backgroundImage: 'url(' + '/cinema.jpg' + ')',\r\n          backgroundPosition: 'center',\r\n          backgroundSize: 'cover',\r\n          backgroundRepeat: 'no-repeat',\r\n        }}\r\n      >\r\n        <div style={{ fontSize: 50, color: '#D40000', fontWeight: 'bolder', letterSpacing: '0.2em', paddingLeft: 15 }}>\r\n          Smovies\r\n        </div>\r\n        <div style={{ color: 'white', fontSize: 50, marginTop: 200, textAlign: 'center' }}>\r\n          Are you a fan of movies?\r\n          <div style={{ fontSize: 30 }}>\r\n            Smovies is for you.\r\n            <div style={{ fontSize: 20 }}>Create & share playlist of movies with everyone.</div>\r\n            <div style={{ fontSize: 20 }}>Get inspiration from others & discover new movies every day.</div>\r\n          </div>\r\n        </div>\r\n        <div style={{ justifyContent: 'center', alignItems: 'center', textAlign: 'center' }}>\r\n          <NavLink to=\"/signup\" style={{textDecoration: 'none', color:'white'}}>\r\n            <div\r\n              style={{\r\n                backgroundColor: '#D40000',\r\n                fontSize: 30,\r\n                color: 'white',\r\n                width: '20%',\r\n                padding: 5,\r\n                borderRadius: 93,\r\n                textAlign: 'center',\r\n                marginLeft: '40%',\r\n                marginTop: 100,\r\n              }}\r\n            >\r\n              Get started\r\n            </div>\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Home\r\n","D:\\smovies\\src\\Pages\\MyBoards.jsx",["136"],"import React, { Component } from 'react'\r\nimport { getUserBoards } from '../helpers/database.js'\r\nimport Header from './../reusable-components/Header.js'\r\nimport BoardView from '../reusable-components/BoardView.js'\r\nimport { auth } from './../services/firebase'\r\nimport { getBoardPosters } from './../helpers/movieDatabase.js'\r\nimport CreateBoardModal from \"./../reusable-components/CreateBoardModal.js\"\r\nimport { NavLink } from 'react-router-dom'\r\nimport ReactLoading from 'react-loading'\r\n\r\nconst axios = require('axios')\r\n\r\nclass MyBoards extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      loaded: false,\r\n      myBoards: undefined,\r\n      modalCreateBoardIsOpen: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        this.loadPosters()\r\n      }\r\n    });\r\n  }\r\n\r\n  callback = (dbBoards) => {\r\n    if (dbBoards != null) {\r\n      Object.keys(dbBoards).forEach(async (boardId) => {\r\n        var posters = {}\r\n        await getBoardPosters(dbBoards[boardId].movies).then((posters_path) => {\r\n          posters = posters_path\r\n          dbBoards[boardId]['posters'] = posters\r\n          this.setState({ myBoards: dbBoards, loaded: true })\r\n        })\r\n      })\r\n    } else {\r\n      this.setState({ myBoards: {}, loaded: true })\r\n    }\r\n  }\r\n\r\n  loadPosters = async () => {\r\n    getUserBoards(this.callback)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: '#414141',\r\n          height: window.innerHeight,\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <Header></Header>\r\n        <CreateBoardModal\r\n          closeModal={() => {\r\n            this.setState({ modalCreateBoardIsOpen: false })\r\n          }}\r\n          isModalOpen={this.state.modalCreateBoardIsOpen}\r\n        ></CreateBoardModal>\r\n        <div\r\n          style={{\r\n            paddingTop: 100,\r\n            color: '#4D4D4D',\r\n            fontSize: 60,\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              flexWrap: 'nowrap',\r\n              overflowX: 'auto',\r\n              padding: 10,\r\n              backgroundColor: '#4D4D4D',\r\n              marginTop: 50,\r\n              fontFamily: 'Poppins',\r\n              fontSize: 20,\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                flexWrap: 'wrap',\r\n                fontFamily: 'Poppins',\r\n                fontSize: 15,\r\n                backgroundColor: \"#575757\",\r\n                color: \"#4C4C4C\",\r\n                margin: 10,\r\n                minWidth: 156,\r\n                minHeight: 210,\r\n              }}\r\n              onClick={() => { this.setState({ modalCreateBoardIsOpen: true }) }}\r\n            >\r\n              <div style={{ fontSize: 91, fontWeight: 'bold', paddingTop: '25%' }}>+</div>\r\n              <div style={{ fontSize: 15, fontWeight: 'normal' }}>Create a board</div>\r\n            </div>\r\n            {!this.state.loaded &&\r\n              <div style={{ paddingLeft: '45%' }}>\r\n                <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\r\n              </div>}\r\n            {this.state.loaded &&\r\n              Object.keys(this.state.myBoards).map((boardId, index) => {\r\n                return (\r\n                  <NavLink\r\n                    to={{\r\n                      pathname: \"/board/\" + boardId,\r\n                      aboutProps: { state: { boardInfo: this.state.myBoards[boardId] } }\r\n                    }}\r\n\r\n                    style={{ textDecoration: \"none\" }}\r\n                  >\r\n                    <div style={{\r\n                      margin: 10,\r\n                    }} key={boardId}>\r\n                      <BoardView\r\n                        name={this.state.myBoards[boardId].title}\r\n                        nStars={this.state.myBoards[boardId].nStars}\r\n                        postersPath={this.state.myBoards[boardId].posters}\r\n                      ></BoardView>\r\n                    </div>\r\n                  </NavLink>\r\n                )\r\n              })}\r\n            <div\r\n              style={{\r\n                flexWrap: 'wrap',\r\n                fontFamily: 'Poppins',\r\n                fontSize: 15,\r\n                margin: 10,\r\n                minWidth: 156,\r\n                minHeight: 210,\r\n              }}>\r\n            </div>\r\n            <div\r\n              style={{\r\n                position: 'absolute',\r\n                top: 135,\r\n                left: 20,\r\n                color: '#8C8C8C',\r\n                fontFamily: 'Poppins',\r\n                fontWeight: 'bolder',\r\n                fontSize: 20,\r\n              }}\r\n            >\r\n              My boards\r\n            </div>\r\n          </div>\r\n          My Boards is coming in the next update...\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default MyBoards\r\n","D:\\smovies\\src\\services\\firebase.js",[],"D:\\smovies\\src\\reusable-components\\Header.js",["137","138"],"import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { logout } from './../helpers/auth.js'\r\n\r\nexport default function Header({ ...props }) {\r\n  const userId = '@Cyrialkiller'\r\n  const pictureLink = '/cyriProfilePic.jpg'\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: 'white',\r\n        width: '100%',\r\n        height: 75,\r\n        fontFamily: 'Poppins',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        position: 'fixed',\r\n        zIndex: 5,\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          width: '20%',\r\n          height: '100%',\r\n          color: '#D40000',\r\n          fontSize: 30,\r\n          fontWeight: 'bolder',\r\n          letterSpacing: '0.2em',\r\n          alignItems: 'center',\r\n          paddingTop: 15,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <div>Smovies</div>\r\n        <div\r\n          style={{\r\n            marginTop: -15,\r\n            color: '#414141',\r\n            fontSize: 20,\r\n            fontWeight: 'normal',\r\n          }}\r\n        >\r\n          Feed\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: '20%',\r\n          height: '100%',\r\n          color: '#414141',\r\n          fontSize: 20,\r\n          fontWeight: 'bolder',\r\n          letterSpacing: '0.2em',\r\n          textAlign: 'center',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          display: 'flex',\r\n        }}\r\n      >\r\n        <NavLink to=\"/Discovery\" style={{ textDecoration: 'none', color: '#414141' }}>\r\n          Discovery\r\n        </NavLink>\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: '20%',\r\n          height: '100%',\r\n          color: '#414141',\r\n          fontSize: 20,\r\n          fontWeight: 'bolder',\r\n          letterSpacing: '0.2em',\r\n          textAlign: 'center',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          display: 'flex',\r\n        }}\r\n      >\r\n        <NavLink to=\"/MyBoards\" style={{ textDecoration: 'none', color: '#414141' }}>\r\n          My Boards\r\n        </NavLink>\r\n      </div>\r\n      {/* <div\r\n        style={{\r\n          width: '20%',\r\n          height: '100%',\r\n          color: '#414141',\r\n          fontSize: 20,\r\n          fontWeight: 'bolder',\r\n          letterSpacing: '0.2em',\r\n          textAlign: 'center',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          display: 'flex',\r\n\r\n        }}\r\n      >\r\n        <NavLink to=\"/MyAccount\" style={{ textDecoration: 'none', color: '#414141' }}>\r\n          My Account\r\n        </NavLink>\r\n      </div> */}\r\n      <div style={{ width: '20%', height: '100%', verticalAlign: 'center', marginLeft:\"20%\" }}>\r\n        <div\r\n          style={{\r\n            margin: 15,\r\n            marginLeft: '50%',\r\n            width: '40%',\r\n            padding: 5,\r\n            backgroundColor: '#D40000',\r\n            color: 'white',\r\n            fontSize: 15,\r\n            textAlign: 'center',\r\n            borderRadius: 93\r\n          }}\r\n          onClick={logout}\r\n        >\r\n          Log out\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\smovies\\src\\reusable-components\\MovieView.js",["139"],"/**\r\n * To do:\r\n *  - Changer l'étoile avec une étoile toggle connectée à Firebase\r\n *\r\n */\r\n\r\nexport default function Movie({ title, voteAverage, posterPath, ...props }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        flexWrap: 'wrap',\r\n        width: 156,\r\n        height: 210,\r\n        fontFamily: 'Poppins',\r\n        fontSize: 15,\r\n        filter:\"drop-shadow(0px 4px 10px rgba(255, 255, 255, 0.05))\",\r\n      }}\r\n    >\r\n      <div style={{ width: '100%', height: 180, backgroundColor: 'grey', borderRadius:\"14px 14px 0px 0px\", }}>\r\n        {posterPath != null  &&\r\n        <img\r\n          src={'https://image.tmdb.org/t/p/original' + posterPath}\r\n          width={'100%'}\r\n          height={'100%'}\r\n          style={{ objectFit: 'cover', objectPosition: '100% 0', borderRadius:\"14px 14px 0px 0px\" }}\r\n        />}\r\n        {posterPath == null &&\r\n        <div style={{height:180, width:\"100%\", paddingTop: 80, textAlign:\"center\"}}> Oops! No poster 😔</div>}\r\n      </div>\r\n      <div\r\n        style={{\r\n          backgroundColor: '#414141',\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          width: '100%',\r\n          height: 30,\r\n          color: 'white',\r\n          borderRadius: '0px 0px 14px 14px'\r\n        }}\r\n      >\r\n        <div style={{ width: '50%', paddingLeft: 5 }}>{title.length < 8 ? title : title.slice(0, 7) + '...'}</div>\r\n        <div style={{ width: '50%', textAlign: 'right' }}>{voteAverage + '/10 🌟'}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\smovies\\src\\helpers\\auth.js",[],"D:\\smovies\\src\\helpers\\movieDatabase.js",[],"D:\\smovies\\src\\reusable-components\\MovieInfoModal.js",["140"],"import Modal from 'react-modal'\r\nimport Popover from 'react-awesome-popover'\r\nimport ActorView from \"./ActorView.js\"\r\n\r\nexport default function MovieInfoModal({ title, synopsis, posterPath, addToBoard, closeModal, isModalOpen, cast, productionCompanies, productionCountries, releaseDate, movieId = undefined, userBoards = undefined, popOver = false, ...props }) {\r\n  Modal.setAppElement('body')\r\n  return (\r\n    <Modal\r\n      isOpen={isModalOpen}\r\n      onRequestClose={closeModal}\r\n      style={{\r\n        overlay: { backgroundColor: 'rgba(65, 65, 65, 0.01)', backdropFilter: 'blur(10px)', },\r\n        content: {\r\n          marginTop: 60,\r\n          marginBottom: 10,\r\n          marginLeft: 60,\r\n          marginRight: 60,\r\n          backgroundColor: '#414141',\r\n          boxShadow: '0px 0px 45px 25px rgba(0, 0, 0, 0.25)',\r\n          borderWidth: 0,\r\n          borderRadius: 0,\r\n        },\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          backgroundColor: '#414141',\r\n          fontFamily: 'Poppins',\r\n          color: 'white',\r\n          padding: 10,\r\n          flexDirection: 'row',\r\n          display: 'flex',\r\n        }}\r\n      >\r\n        <div style={{ width: '25%' }}>\r\n          <img\r\n            src={'https://image.tmdb.org/t/p/original' + posterPath}\r\n            width={'100%'}\r\n            height={'auto'}\r\n            style={{ filter: 'drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25))', borderRadius: 17 }}\r\n          />\r\n        </div>\r\n        <div style={{ width: '70%', textAlign: 'left', marginLeft: 100 }}>\r\n          <div style={{ fontSize: 40, textAlign: 'center', fontFamily: 'Playfair Display' }}>\r\n            {title}\r\n          </div>\r\n          <div style={{ fontSize: 15, maxWidth: '80%', marginTop: 20 }}>\r\n            <div style={{ fontWeight: 'bolder', fontSize: 20 }}>Synopsis:</div>\r\n            {synopsis}\r\n            <div style={{ fontWeight: 'bolder', marginTop: 20, fontSize: 20 }}> More information:</div>\r\n            {productionCompanies != null && <div><div style={{ color: \"#8D8D8D\" }}>Production: <div style={{ color: \"white\" }}>{productionCompanies == null ? \"\" : productionCompanies[0].name}</div> </div>\r\n              <div style={{ color: \"#8D8D8D\" }}>Release Date: <div style={{ color: \"white\" }}>{releaseDate}</div></div></div>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {cast != null &&\r\n        <div>\r\n          <div style={{\r\n            marginTop: 50,\r\n            fontFamily: \"Poppins\",\r\n            fontSize: 15,\r\n            fontWeight: \"bolder\",\r\n            color: \"white\",\r\n            paddingLeft: 10\r\n          }}>Main 5 actors:</div>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              flexWrap: 'nowrap',\r\n              overflowX: 'auto',\r\n              padding: 10,\r\n              backgroundColor: '#4D4D4D',\r\n              marginTop: 10,\r\n            }}\r\n          >\r\n            {cast.slice(0, 5).map((actor) => {\r\n              return (\r\n                <div style={{ margin: 10 }}>\r\n                  <ActorView name={actor.name} posterPath={actor.profile_path}></ActorView>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>}\r\n      <div style={{ display: 'flex', flexDirection: 'row', marginTop: 20 }}>\r\n        <div style={{ width: '50%' }}>\r\n          <button\r\n            style={{\r\n              backgroundColor: '#4C4C4C',\r\n              borderRadius: 31,\r\n              borderWidth: 0,\r\n              padding: 10,\r\n              fontSize: 20,\r\n              color: 'white',\r\n              width: '50%',\r\n              textAlign: 'center',\r\n            }}\r\n            onClick={closeModal}\r\n          >\r\n            ← Back to movies\r\n          </button>\r\n        </div>\r\n        <div style={{ width: '50%', justifyContent: 'flex-end', display: 'flex' }}>\r\n          {!popOver && <button\r\n            style={{\r\n              backgroundColor: '#D40000',\r\n              borderRadius: 31,\r\n              borderWidth: 0,\r\n              padding: 10,\r\n              fontSize: 20,\r\n              color: 'white',\r\n              width: '50%',\r\n              textAlign: 'center',\r\n            }}\r\n            onClick={addToBoard}\r\n          >\r\n            + Add to board\r\n          </button>}\r\n          {popOver &&\r\n            <Popover\r\n              placement={\"left-center\"}\r\n              arrow={false}>\r\n              <button\r\n                style={{\r\n                  backgroundColor: '#D40000',\r\n                  borderRadius: 31,\r\n                  borderWidth: 0,\r\n                  padding: 10,\r\n                  fontSize: 20,\r\n                  color: 'white',\r\n                  width: '100%',\r\n                  textAlign: 'center',\r\n                }}\r\n              >\r\n                + Add to board\r\n              </button>\r\n              <div style={{\r\n                backgroundColor: 'white',\r\n                color: \"black\",\r\n                margin: 10,\r\n                borderRadius: 14,\r\n                width: 300,\r\n                padding: 10\r\n              }}>\r\n                <div style={{ fontSize: 20, textDecoration: 'black underline', textAlign: 'center' }}> My Boards</div>\r\n                {Object.keys(userBoards).map((boardId) => {\r\n                  return (\r\n                    <div style={{\r\n                      display: 'flex',\r\n                      flexDirection: 'row',\r\n                      padding: 10,\r\n                      alignItems: \"center\",\r\n                      justifyContent: 'center'\r\n                    }}>\r\n                      <div style={{ width: \"75%\", fontSize: 15 }}>{userBoards[boardId].title}</div>\r\n                      <div style={{ width: \"25%\", fontSize: 30, textAlign: \"right\" }} onClick={() => { addToBoard(boardId, movieId) }}>\r\n                        {userBoards[boardId].movies.includes(movieId) ? \"✓\" : \"+\"}</div>\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </Popover>}\r\n        </div>\r\n      </div>\r\n    </Modal >\r\n  )\r\n}\r\n","D:\\smovies\\src\\helpers\\database.js",["141","142","143","144","145"],"import { auth, database } from './../services/firebase.js'\r\nimport uuid from 'react-uuid'\r\n\r\nfunction utcTimestampToDateString(timestamp) {\r\n  try {\r\n    // Convert to date object.\r\n    const date = new Date(Number(timestamp));\r\n    // Test date is valid.\r\n    if (!isNaN(date.getTime())) {\r\n      // Convert to UTC date string.\r\n      return date.toUTCString();\r\n    }\r\n  } catch (e) {\r\n    // Do nothing. undefined will be returned.\r\n  }\r\n  return undefined;\r\n}\r\n\r\nexport async function getAllBoards(callback) {\r\n  database.ref(`boards`).on('value', (snapshot) => {\r\n    var allBoards={}\r\n    snapshot.forEach((snap) => {\r\n      allBoards[snap.key]=(snap.val())\r\n    })\r\n    callback(allBoards)\r\n  })\r\n}\r\n\r\nexport async function getUserInfo(callback) {\r\n  var userId = auth().currentUser\r\n  database.ref(`users/${userId.uid}`).on('value', async (snapshot) => {\r\n    callback(snapshot.val())\r\n  })\r\n}\r\n\r\nexport async function getUserBoards(callback) {\r\n  var userId = auth().currentUser\r\n  var boards = []\r\n  var boardsInfo = {}\r\n  database.ref(`users/${userId.uid}/boards`).on('value', async (snapshot) => {\r\n    snapshot.forEach((snap) => {\r\n      boards.push(snap.val())\r\n    })\r\n    if (boards.length > 1) {\r\n      for (const boardId of boards) {\r\n        database.ref(`boards/${boardId}`).on('value', (snapshot) => {\r\n          boardsInfo[boardId] = snapshot.val()\r\n          if (Object.keys(boardsInfo).length == boards.length) {\r\n            callback(boardsInfo)\r\n          }\r\n        })\r\n      }\r\n    } else if (boards.length == 1) {\r\n      var boardId = boards[0]\r\n      database.ref(`boards/${boardId}`).on('value', (snapshot) => {\r\n        callback({ [boardId]: snapshot.val() })\r\n      })\r\n    } else {\r\n      callback(null)\r\n    }\r\n  })\r\n}\r\n\r\nexport async function createBoard(board) {\r\n  var uid = uuid()\r\n  var user = auth().currentUser\r\n  database.ref(`boards/${uid}`).set({\r\n    movies: board.moviesId,\r\n    createdBy: user.uid,\r\n    nStars: 0,\r\n    title: board.title,\r\n  })\r\n  getUserBoards((userBoards) => {\r\n    if (userBoards != null && userBoards != undefined) {\r\n      if (!Object.keys(userBoards).includes(uid)) {\r\n        var updatedUserBoards = Object.keys(userBoards).concat([uid])\r\n        updateUser({ boards: updatedUserBoards })\r\n      }\r\n    } else {\r\n      updateUser({ boards: [uid] })\r\n    }\r\n  })\r\n\r\n}\r\n\r\nexport async function createUser(user) {\r\n  database.ref(`users/${user.uid}`).set({\r\n    email: user.email,\r\n    boards: [],\r\n    createdAt: user.metadata.creationTime,\r\n    lastConnection: user.metadata.lastSignInTime,\r\n    savedBoards: [],\r\n    savedMovies: [],\r\n  })\r\n}\r\n\r\nexport async function updateBoard(boardId, updatedValues) {\r\n  try {\r\n    database.ref(`boards/${boardId}`).update(updatedValues)\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport async function addMovieToBoard(boardId, movieId) {\r\n  database.ref(`boards/${boardId}`).on('value', (snapshot) => {\r\n    var movies = [...snapshot.val().movies, movieId]\r\n    var moviesTemp = []\r\n    for (var movie of movies) {\r\n      if (!moviesTemp.includes(movie)) {\r\n        moviesTemp.push(movie)\r\n      }\r\n    }\r\n    updateBoard(boardId, { movies: moviesTemp, lastUpdate: utcTimestampToDateString(Date.now()) })\r\n  })\r\n}\r\n\r\nexport async function removeMovieFromBoard(boardId, movieId) {\r\n  database.ref(`boards/${boardId}`).on('value', (snapshot) => {\r\n    var movies = [...snapshot.val().movies]\r\n    var moviesTemp = []\r\n    for (var movie of movies) {\r\n      if (movie != movieId) {\r\n        if (!moviesTemp.includes(movie)) {\r\n          moviesTemp.push(movie)\r\n        }\r\n      }\r\n    }\r\n    updateBoard(boardId, { movies: moviesTemp, lastUpdate: utcTimestampToDateString(Date.now()) })\r\n  })\r\n}\r\n\r\nexport async function updateUser(updatedValues) {\r\n  var user = auth().currentUser\r\n  database.ref(`users/${user.uid}`).update(updatedValues)\r\n}\r\n\r\nexport async function deleteBoard(boardId) {\r\n  var user = auth().currentUser\r\n  database.ref(`boards/${user.uid}/${boardId}`).remove()\r\n}\r\n\r\nexport default { createUser, createBoard, getUserBoards, getUserInfo, getAllBoards, updateBoard, addMovieToBoard, updateUser, deleteBoard }\r\n","D:\\smovies\\src\\reusable-components\\CreateBoardModal.js",[],"D:\\smovies\\src\\reusable-components\\BoardView.js",["146","147"],"/**\r\n * To do:\r\n *  - Changer l'étoile avec une étoile toggle connectée à Firebase\r\n *\r\n */\r\n\r\nexport default function BoardView({ name, nStars, postersPath, hideBanner = false, ...props }) {\r\n  if (postersPath != undefined) {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: 156,\r\n          height: 210,\r\n          fontFamily: 'Poppins',\r\n          fontSize: 15,\r\n          flexWrap: 'wrap',\r\n          filter:\"drop-shadow(0px 4px 10px rgba(255, 255, 255, 0.05))\",\r\n          ...props,\r\n\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: JSON.stringify(180*100/210)+'%',\r\n            flexWrap: 'wrap',\r\n            flexDirection: 'row',\r\n            display: 'flex',\r\n          }}\r\n        >\r\n          {postersPath.map((moviePoster, index) => {\r\n            return (\r\n              <div style={{ height: '50%', width: '50%', display: 'flex' }} key={moviePoster + JSON.stringify(index)}>\r\n                {moviePoster !== null &&\r\n                  <img\r\n                    src={'https://image.tmdb.org/t/p/original' + moviePoster}\r\n                    width={'100%'}\r\n                    height={'100%'}\r\n                    style={{ objectFit: 'cover', objectPosition: '100% 0' }}\r\n                  />}\r\n                {moviePoster == null &&\r\n                  <div style={{ width: '100%', height: '100%', color: 'grey', backgroundColor: \"#575757\" }}>No Poster</div>}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        {!hideBanner &&\r\n          <div\r\n            style={{\r\n              backgroundColor: '#414141',\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              width: '100%',\r\n              height: 30,\r\n              color: 'white',\r\n            }}\r\n          >\r\n            <div style={{ width: '50%', paddingLeft: 5, textAlign: \"left\" }}>{name.length < 8 ? name : name.slice(0, 7) + '...'}</div>\r\n            <div style={{ width: '50%', textAlign: 'right' }}>{nStars + '🌟'}</div>\r\n          </div>}\r\n      </div>\r\n    )\r\n  } else {\r\n    return <div></div>\r\n  }\r\n}\r\n","D:\\smovies\\src\\Pages\\MyAccount.jsx",["148","149","150","151","152","153","154"],"import React, { Component } from 'react'\r\nimport { getBoardPosters, getMoviesInfo } from '../helpers/movieDatabase.js'\r\nimport { auth, database } from './../services/firebase.js'\r\nimport ReactLoading from 'react-loading'\r\nimport { addMovieToBoard, getUserInfo } from '../helpers/database.js'\r\nimport Header from './../reusable-components/Header.js'\r\nconst axios = require('axios')\r\n\r\nclass MyAccount extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            info:null,\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        getUserInfo((info)=>{this.setState({info:info})})\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    backgroundColor: '#414141',\r\n                    height: window.innerHeight,\r\n                    position: 'relative',\r\n                    fontFamily:'Poppins',\r\n                }}\r\n            >\r\n                <Header></Header>\r\n                <div style={{paddingTop:150}}></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MyAccount;","D:\\smovies\\src\\reusable-components\\ActorView.js",["155"],"\r\nexport default function ActorView({ name,posterPath, ...props }) {\r\n    return (\r\n      <div\r\n        style={{\r\n          flexWrap: 'wrap',\r\n          width: 156,\r\n          height: 210,\r\n          fontFamily: 'Poppins',\r\n          fontSize: 15,\r\n          filter:\"drop-shadow(0px 4px 10px rgba(255, 255, 255, 0.05))\",\r\n        }}\r\n      >\r\n        <div style={{ width: '100%', height: 180, backgroundColor: 'grey', borderRadius:\"14px 14px 0px 0px\", }}>\r\n          {posterPath != null  &&\r\n          <img\r\n            src={'https://image.tmdb.org/t/p/original' + posterPath}\r\n            width={'100%'}\r\n            height={'100%'}\r\n            style={{ objectFit: 'cover', objectPosition: '100% 0', borderRadius:\"14px 14px 0px 0px\" }}\r\n          />}\r\n          {posterPath == null &&\r\n          <div style={{height:180, width:\"100%\", paddingTop: 80, textAlign:\"center\"}}> Oops! No poster 😔</div>}\r\n        </div>\r\n        <div\r\n          style={{\r\n            backgroundColor: '#414141',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            width: '100%',\r\n            height: 30,\r\n            color: 'white',\r\n            borderRadius: '0px 0px 14px 14px'\r\n          }}\r\n        >\r\n          <div style={{paddingLeft: 5 }}>{name}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }",["156","157"],"D:\\smovies\\src\\tools\\stringSearch.js",["158","159","160"],"export function damerauLevenshteinDistance(str1, str2) {\r\n    if (str1 == null) {\r\n        return str2.length\r\n    } else if (str2 == null) {\r\n        return str1.length\r\n    } else {\r\n        var d = []\r\n        for (var i = 0; i <= str1.length; i++) {\r\n            var list = []\r\n            for (var j = 0; j <= str2.length; j++) {\r\n                list.push(0)\r\n            }\r\n            d.push(list)\r\n        }\r\n        for (var i = 0; i <= str1.length; i++) {\r\n            d[i][0] = i\r\n            for (var j = 0; j <= str2.length; j++) {\r\n                d[0][j] = j\r\n            }\r\n        }\r\n\r\n        for (var i = 1; i <= str1.length; i++) {\r\n            var cost = 0\r\n            for (let j = 1; j <= str2.length; j++) {\r\n                if (str1.charAt(i - 1) === str2.charAt(j - 1)) {\r\n                    cost = 0;\r\n                } else {\r\n                    cost = 1;\r\n                }\r\n                d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost)\r\n\r\n                if (i > 1 && j > 1 && str1[i - 1] === str2[j - 2] && str1[i - 2] === str2[j - 1]) {\r\n                    d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost)\r\n                }\r\n            }\r\n        }\r\n        return d[str1.length][str2.length];\r\n    }\r\n}\r\n\r\n",{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":28,"nodeType":"167","messageId":"168","endLine":1,"endColumn":37},{"ruleId":"165","severity":1,"message":"169","line":4,"column":16,"nodeType":"167","messageId":"168","endLine":4,"endColumn":24},{"ruleId":"170","severity":1,"message":"171","line":303,"column":36,"nodeType":"172","messageId":"173","endLine":303,"endColumn":38},{"ruleId":"170","severity":1,"message":"171","line":317,"column":34,"nodeType":"172","messageId":"173","endLine":317,"endColumn":36},{"ruleId":"170","severity":1,"message":"171","line":435,"column":57,"nodeType":"172","messageId":"173","endLine":435,"endColumn":59},{"ruleId":"170","severity":1,"message":"174","line":483,"column":57,"nodeType":"172","messageId":"173","endLine":483,"endColumn":59},{"ruleId":"170","severity":1,"message":"171","line":551,"column":38,"nodeType":"172","messageId":"173","endLine":551,"endColumn":40},{"ruleId":"170","severity":1,"message":"174","line":570,"column":38,"nodeType":"172","messageId":"173","endLine":570,"endColumn":40},{"ruleId":"175","severity":1,"message":"176","line":5,"column":3,"nodeType":"177","messageId":"178","endLine":7,"endColumn":4},{"ruleId":"165","severity":1,"message":"179","line":6,"column":10,"nodeType":"167","messageId":"168","endLine":6,"endColumn":14},{"ruleId":"170","severity":1,"message":"171","line":64,"column":14,"nodeType":"172","messageId":"173","endLine":64,"endColumn":16},{"ruleId":"170","severity":1,"message":"171","line":66,"column":21,"nodeType":"172","messageId":"173","endLine":66,"endColumn":23},{"ruleId":"180","severity":1,"message":"181","line":79,"column":35,"nodeType":"172","messageId":"182","endLine":79,"endColumn":36},{"ruleId":"180","severity":1,"message":"181","line":79,"column":51,"nodeType":"172","messageId":"182","endLine":79,"endColumn":52},{"ruleId":"180","severity":1,"message":"181","line":45,"column":35,"nodeType":"172","messageId":"182","endLine":45,"endColumn":36},{"ruleId":"180","severity":1,"message":"181","line":45,"column":51,"nodeType":"172","messageId":"182","endLine":45,"endColumn":52},{"ruleId":"175","severity":1,"message":"176","line":5,"column":3,"nodeType":"177","messageId":"178","endLine":7,"endColumn":4},{"ruleId":"180","severity":1,"message":"181","line":17,"column":35,"nodeType":"172","messageId":"182","endLine":17,"endColumn":36},{"ruleId":"180","severity":1,"message":"181","line":17,"column":51,"nodeType":"172","messageId":"182","endLine":17,"endColumn":52},{"ruleId":"165","severity":1,"message":"183","line":11,"column":7,"nodeType":"167","messageId":"168","endLine":11,"endColumn":12},{"ruleId":"165","severity":1,"message":"184","line":6,"column":9,"nodeType":"167","messageId":"168","endLine":6,"endColumn":15},{"ruleId":"165","severity":1,"message":"185","line":7,"column":9,"nodeType":"167","messageId":"168","endLine":7,"endColumn":20},{"ruleId":"186","severity":1,"message":"187","line":21,"column":9,"nodeType":"188","endLine":26,"endColumn":11},{"ruleId":"186","severity":1,"message":"187","line":36,"column":11,"nodeType":"188","endLine":41,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":48,"column":46,"nodeType":"172","messageId":"173","endLine":48,"endColumn":48},{"ruleId":"170","severity":1,"message":"171","line":53,"column":30,"nodeType":"172","messageId":"173","endLine":53,"endColumn":32},{"ruleId":"170","severity":1,"message":"174","line":74,"column":42,"nodeType":"172","messageId":"173","endLine":74,"endColumn":44},{"ruleId":"170","severity":1,"message":"174","line":123,"column":17,"nodeType":"172","messageId":"173","endLine":123,"endColumn":19},{"ruleId":"189","severity":1,"message":"190","line":143,"column":1,"nodeType":"191","endLine":143,"endColumn":140},{"ruleId":"170","severity":1,"message":"174","line":8,"column":19,"nodeType":"172","messageId":"173","endLine":8,"endColumn":21},{"ruleId":"186","severity":1,"message":"187","line":34,"column":19,"nodeType":"188","endLine":39,"endColumn":21},{"ruleId":"165","severity":1,"message":"192","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":25},{"ruleId":"165","severity":1,"message":"193","line":2,"column":27,"nodeType":"167","messageId":"168","endLine":2,"endColumn":40},{"ruleId":"165","severity":1,"message":"179","line":3,"column":10,"nodeType":"167","messageId":"168","endLine":3,"endColumn":14},{"ruleId":"165","severity":1,"message":"169","line":3,"column":16,"nodeType":"167","messageId":"168","endLine":3,"endColumn":24},{"ruleId":"165","severity":1,"message":"194","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":20},{"ruleId":"165","severity":1,"message":"195","line":5,"column":10,"nodeType":"167","messageId":"168","endLine":5,"endColumn":25},{"ruleId":"165","severity":1,"message":"183","line":7,"column":7,"nodeType":"167","messageId":"168","endLine":7,"endColumn":12},{"ruleId":"186","severity":1,"message":"187","line":16,"column":11,"nodeType":"188","endLine":21,"endColumn":13},{"ruleId":"161","replacedBy":"196"},{"ruleId":"163","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":15,"column":18,"nodeType":"167","messageId":"200","endLine":15,"endColumn":19},{"ruleId":"198","severity":1,"message":"201","line":17,"column":22,"nodeType":"167","messageId":"200","endLine":17,"endColumn":23},{"ruleId":"198","severity":1,"message":"199","line":22,"column":18,"nodeType":"167","messageId":"200","endLine":22,"endColumn":19},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'database' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'auth' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'axios' is assigned a value but never used.","'userId' is assigned a value but never used.","'pictureLink' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'getBoardPosters' is defined but never used.","'getMoviesInfo' is defined but never used.","'ReactLoading' is defined but never used.","'addMovieToBoard' is defined but never used.",["202"],["203"],"no-redeclare","'i' is already defined.","redeclared","'j' is already defined.","no-global-assign","no-unsafe-negation"]