[{"/Users/cyrie/Documents/dev/Smovies/src/index.js":"1","/Users/cyrie/Documents/dev/Smovies/src/App.js":"2","/Users/cyrie/Documents/dev/Smovies/src/reportWebVitals.js":"3","/Users/cyrie/Documents/dev/Smovies/src/Playground.jsx":"4","/Users/cyrie/Documents/dev/Smovies/src/Pages/MyBoards.jsx":"5","/Users/cyrie/Documents/dev/Smovies/src/Pages/Home.jsx":"6","/Users/cyrie/Documents/dev/Smovies/src/Pages/Discovery.jsx":"7","/Users/cyrie/Documents/dev/Smovies/src/Pages/Board.jsx":"8","/Users/cyrie/Documents/dev/Smovies/src/reusable-components/Header.js":"9","/Users/cyrie/Documents/dev/Smovies/src/Pages/Feed.jsx":"10","/Users/cyrie/Documents/dev/Smovies/src/Pages/404.jsx":"11","/Users/cyrie/Documents/dev/Smovies/src/Pages/Login.jsx":"12","/Users/cyrie/Documents/dev/Smovies/src/Pages/Signup.jsx":"13","/Users/cyrie/Documents/dev/Smovies/src/Pages/MyAccount.jsx":"14","/Users/cyrie/Documents/dev/Smovies/src/services/firebase.js":"15","/Users/cyrie/Documents/dev/Smovies/src/reusable-components/BoardView.js":"16","/Users/cyrie/Documents/dev/Smovies/src/reusable-components/MovieView.js":"17","/Users/cyrie/Documents/dev/Smovies/src/reusable-components/CreateBoardModal.js":"18","/Users/cyrie/Documents/dev/Smovies/src/reusable-components/MovieInfoModal.js":"19","/Users/cyrie/Documents/dev/Smovies/src/helpers/database.js":"20","/Users/cyrie/Documents/dev/Smovies/src/helpers/movieDatabase.js":"21","/Users/cyrie/Documents/dev/Smovies/src/tools/stringSearch.js":"22","/Users/cyrie/Documents/dev/Smovies/src/helpers/auth.js":"23","/Users/cyrie/Documents/dev/Smovies/src/reusable-components/ActorView.js":"24"},{"size":500,"mtime":1612197600284,"results":"25","hashOfConfig":"26"},{"size":2768,"mtime":1612252216637,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1612197600284,"results":"28","hashOfConfig":"26"},{"size":280,"mtime":1612197600284,"results":"29","hashOfConfig":"26"},{"size":4833,"mtime":1612252216639,"results":"30","hashOfConfig":"26"},{"size":1837,"mtime":1612252568327,"results":"31","hashOfConfig":"26"},{"size":20174,"mtime":1612252216638,"results":"32","hashOfConfig":"26"},{"size":13923,"mtime":1612252216637,"results":"33","hashOfConfig":"26"},{"size":2930,"mtime":1612252825920,"results":"34","hashOfConfig":"26"},{"size":3369,"mtime":1612252543793,"results":"35","hashOfConfig":"26"},{"size":557,"mtime":1612252216637,"results":"36","hashOfConfig":"26"},{"size":8435,"mtime":1612252216638,"results":"37","hashOfConfig":"26"},{"size":4441,"mtime":1612252216639,"results":"38","hashOfConfig":"26"},{"size":1049,"mtime":1612252216638,"results":"39","hashOfConfig":"26"},{"size":350,"mtime":1612252216640,"results":"40","hashOfConfig":"26"},{"size":2021,"mtime":1612252216640,"results":"41","hashOfConfig":"26"},{"size":1452,"mtime":1612252216640,"results":"42","hashOfConfig":"26"},{"size":6647,"mtime":1612252216640,"results":"43","hashOfConfig":"26"},{"size":5939,"mtime":1612252216640,"results":"44","hashOfConfig":"26"},{"size":4009,"mtime":1612252216639,"results":"45","hashOfConfig":"26"},{"size":1723,"mtime":1612252216639,"results":"46","hashOfConfig":"26"},{"size":1239,"mtime":1612252216641,"results":"47","hashOfConfig":"26"},{"size":533,"mtime":1612252216639,"results":"48","hashOfConfig":"26"},{"size":1270,"mtime":1612252216640,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"xpnmm0",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"52"},"/Users/cyrie/Documents/dev/Smovies/src/index.js",[],["111","112"],"/Users/cyrie/Documents/dev/Smovies/src/App.js",[],"/Users/cyrie/Documents/dev/Smovies/src/reportWebVitals.js",[],"/Users/cyrie/Documents/dev/Smovies/src/Playground.jsx",[],"/Users/cyrie/Documents/dev/Smovies/src/Pages/MyBoards.jsx",["113"],"import React, { Component } from 'react'\nimport { getUserBoards } from '../helpers/database.js'\nimport Header from './../reusable-components/Header.js'\nimport BoardView from '../reusable-components/BoardView.js'\nimport { auth } from './../services/firebase'\nimport { getBoardPosters } from './../helpers/movieDatabase.js'\nimport CreateBoardModal from \"./../reusable-components/CreateBoardModal.js\"\nimport { NavLink } from 'react-router-dom'\nimport ReactLoading from 'react-loading'\n\nconst axios = require('axios')\n\nclass MyBoards extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loaded: false,\n      myBoards: undefined,\n      modalCreateBoardIsOpen: false,\n    }\n  }\n\n  componentDidMount() {\n    auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.loadPosters()\n      }\n    });\n  }\n\n  callback = (dbBoards) => {\n    if (dbBoards != null) {\n      Object.keys(dbBoards).forEach(async (boardId) => {\n        var posters = {}\n        await getBoardPosters(dbBoards[boardId].movies).then((posters_path) => {\n          posters = posters_path\n          dbBoards[boardId]['posters'] = posters\n          this.setState({ myBoards: dbBoards, loaded: true })\n        })\n      })\n    } else {\n      this.setState({ myBoards: {}, loaded: true })\n    }\n  }\n\n  loadPosters = async () => {\n    getUserBoards(this.callback)\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          backgroundColor: '#414141',\n          height: window.innerHeight,\n          position: 'relative',\n        }}\n      >\n        <Header></Header>\n        <CreateBoardModal\n          closeModal={() => {\n            this.setState({ modalCreateBoardIsOpen: false })\n          }}\n          isModalOpen={this.state.modalCreateBoardIsOpen}\n        ></CreateBoardModal>\n        <div\n          style={{\n            paddingTop: 100,\n            color: '#4D4D4D',\n            fontSize: 60,\n            textAlign: 'center',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              flexWrap: 'nowrap',\n              overflowX: 'auto',\n              padding: 10,\n              backgroundColor: '#4D4D4D',\n              marginTop: 50,\n              fontFamily: 'Poppins',\n              fontSize: 20,\n            }}\n          >\n            <div\n              style={{\n                flexWrap: 'wrap',\n                fontFamily: 'Poppins',\n                fontSize: 15,\n                backgroundColor: \"#575757\",\n                color: \"#4C4C4C\",\n                margin: 10,\n                minWidth: 156,\n                minHeight: 210,\n              }}\n              onClick={() => { this.setState({ modalCreateBoardIsOpen: true }) }}\n            >\n              <div style={{ fontSize: 91, fontWeight: 'bold', paddingTop: '25%' }}>+</div>\n              <div style={{ fontSize: 15, fontWeight: 'normal' }}>Create a board</div>\n            </div>\n            {!this.state.loaded &&\n              <div style={{ paddingLeft: '45%' }}>\n                <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\n              </div>}\n            {this.state.loaded &&\n              Object.keys(this.state.myBoards).map((boardId, index) => {\n                return (\n                  <NavLink\n                    to={{\n                      pathname: \"/board/\" + boardId,\n                      aboutProps: { state: { boardInfo: this.state.myBoards[boardId] } }\n                    }}\n\n                    style={{ textDecoration: \"none\" }}\n                  >\n                    <div style={{\n                      margin: 10,\n                    }} key={boardId}>\n                      <BoardView\n                        name={this.state.myBoards[boardId].title}\n                        nStars={this.state.myBoards[boardId].nStars}\n                        postersPath={this.state.myBoards[boardId].posters}\n                      ></BoardView>\n                    </div>\n                  </NavLink>\n                )\n              })}\n            <div\n              style={{\n                flexWrap: 'wrap',\n                fontFamily: 'Poppins',\n                fontSize: 15,\n                margin: 10,\n                minWidth: 156,\n                minHeight: 210,\n              }}>\n            </div>\n            <div\n              style={{\n                position: 'absolute',\n                top: 135,\n                left: 20,\n                color: '#8C8C8C',\n                fontFamily: 'Poppins',\n                fontWeight: 'bolder',\n                fontSize: 20,\n              }}\n            >\n              My boards\n            </div>\n          </div>\n          My Boards is coming in the next update...\n        </div>\n      </div>\n    )\n  }\n}\nexport default MyBoards\n","/Users/cyrie/Documents/dev/Smovies/src/Pages/Home.jsx",["114","115","116"],"/Users/cyrie/Documents/dev/Smovies/src/Pages/Discovery.jsx",["117"],"import React, { Component, useEffect } from 'react'\nimport Header from './../reusable-components/Header.js'\nimport BoardView from '../reusable-components/BoardView.js'\nimport { auth, database } from './../services/firebase.js'\nimport Movie from './../reusable-components/MovieView.js'\nimport MovieInfoModal from './../reusable-components/MovieInfoModal.js'\nimport ReactLoading from 'react-loading'\nimport { getUserBoards, addMovieToBoard, getAllBoards } from '../helpers/database.js'\nimport { getBoardPosters } from './../helpers/movieDatabase.js'\nimport { NavLink } from 'react-router-dom'\nimport { damerauLevenshteinDistance } from '../tools/stringSearch.js'\n\nconst axios = require('axios')\n\nclass Discovery extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      toggleBM: {\n        type: 'movies',\n        colors: ['#D40000', '#525252'],\n      },\n      allBoardsLoaded: false,\n      allBoards: {},\n      loading: false,\n      searchText: '',\n      loaded: false,\n      boards: [],\n      user: auth().currentUser,\n      userBoards: {},\n      search: false,\n      searchResults: [],\n      discoverMovies: {},\n      searchBoardResults: [],\n      modalMovieIsOpen: false,\n      modalMovie: {\n        movieId: null,\n        poster_path: null,\n        title: null,\n        synopsis: null,\n        voteAverage: null,\n        cast: null,\n        productionCompanies: null,\n        productionCountries: null,\n        releaseDate: null,\n      },\n    }\n  }\n\n\n  callback = (dbBoards) => {\n    if (dbBoards != null) {\n      Object.keys(dbBoards).forEach(async (boardId) => {\n        var posters = {}\n        await getBoardPosters(dbBoards[boardId].movies).then((posters_path) => {\n          posters = posters_path\n          dbBoards[boardId]['posters'] = posters\n          this.setState({ allBoards: dbBoards, allBoardsLoaded: true })\n        })\n      })\n    } else {\n      this.setState({ allBoards: {}, allBoardsLoaded: true })\n    }\n  }\n\n  async componentDidMount() {\n    getAllBoards(this.callback)\n    try {\n      await this.discoverMovie()\n      await getUserBoards((userBoards) => {\n        if (userBoards != null) {\n          this.setState({ userBoards: userBoards })\n        }\n      })\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n   * Get the info of the movie and open the modal\n   * @param {Integer} id \n   */\n  openModal = async (id) => {\n    try {\n      await this.getMovieInfo(id)\n      this.setState({ modalMovieIsOpen: true })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n   * Get the information of the movie corresponding to the id\n   * @param {Integer} id \n   */\n  getMovieInfo = async (id) => {\n    try {\n      const movieInfo = await axios.get('https://api.themoviedb.org/3/movie/' + id, {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n        },\n      })\n      const castInfo = await axios.get('https://api.themoviedb.org/3/movie/' + id + '/credits', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n        }\n      })\n      const modalInfo = {\n        movieId: id,\n        title: movieInfo.data.original_title,\n        poster_path: movieInfo.data.poster_path,\n        synopsis: movieInfo.data.overview,\n        voteAverage: movieInfo.data.vote_average,\n        cast: castInfo.data.cast,\n        productionCompanies: movieInfo.data.production_companies,\n        productionCountries: movieInfo.data.production_countries,\n        releaseDate: movieInfo.data.release_date\n      }\n      this.setState({ modalMovie: modalInfo })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  discoverMovie = async () => {\n    try {\n      const weeklyTrend = await axios.get('https://api.themoviedb.org/3/trending/movie/week', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Movies of the week': weeklyTrend.data.results } })\n      const dailyTrend = await axios.get('https://api.themoviedb.org/3/trending/movie/day', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Movies of the day': dailyTrend.data.results } })\n\n      const movies2020 = await axios.get('https://api.themoviedb.org/3/discover/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          sort_by: 'popularity.desc',\n          include_adult: false,\n          include_video: false,\n          year: 2020,\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, \"Best of 2020\": movies2020.data.results } })\n      const popular = await axios.get('https://api.themoviedb.org/3/movie/popular', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Popular': popular.data.results } })\n      const topRated = await axios.get('https://api.themoviedb.org/3/movie/top_rated', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Top rated': topRated.data.results } })\n      const upcoming = await axios.get('https://api.themoviedb.org/3/movie/upcoming', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Recent': upcoming.data.results } })\n      const actionMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          sort_by: 'vote_count.desc',\n          include_video: false,\n          with_genres: 28\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Action': actionMovies.data.results } })\n      const adventureMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          sort_by: 'vote_count.desc',\n          include_video: false,\n          with_genres: 12\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Adventure': adventureMovies.data.results } })\n      const comedyMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          sort_by: 'vote_count.desc',\n          include_video: false,\n          with_genres: 35\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Comedy': comedyMovies.data.results } })\n      const crimeMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          sort_by: 'vote_count.desc',\n          include_video: false,\n          with_genres: 80\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Crime': crimeMovies.data.results } })\n      const westernMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          sort_by: 'vote_count.desc',\n          include_video: false,\n          with_genres: 37\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Western': westernMovies.data.results } })\n      const scifiMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          sort_by: 'popularity.desc',\n          include_video: false,\n          with_genres: 878\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'Science fiction': scifiMovies.data.results } })\n      const historyMovies = await axios.get('https://api.themoviedb.org/3/discover/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          sort_by: 'popularity.desc',\n          include_video: false,\n          with_genres: 36\n        },\n      })\n      this.setState({ discoverMovies: { ...this.state.discoverMovies, 'History': historyMovies.data.results } })\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n   * Store the text for search\n   * @param {*} event\n   */\n  changeSearch = (event) => {\n    this.setState({ searchText: event.target.value })\n  }\n\n  /**\n   * Find a movie in the Movie database\n   */\n  searchMovie = async () => {\n    try {\n      const movies = await axios.get('https://api.themoviedb.org/3/search/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          query: this.state.searchText,\n        },\n      })\n      this.setState({ loaded: true, searchResults: movies.data.results, loading: false })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  searchBoard = async () => {\n    var searchString = this.state.searchText.toLocaleLowerCase('en-US')\n    var results = {}\n    Object.keys(this.state.allBoards).forEach((key) => {\n      var DLdistance = damerauLevenshteinDistance(searchString, this.state.allBoards[key].title)\n      if (this.state.allBoards[key].title.toLocaleLowerCase('en-US').includes(searchString)) {\n        results[key] = { ...this.state.allBoards[key], included: true, DLdistance: DLdistance }\n      } else if (searchString.includes(this.state.allBoards[key].title.toLocaleLowerCase('en-US'))) {\n        results[key] = { ...this.state.allBoards[key], included: true, DLdistance: DLdistance }\n      } else {\n        if (DLdistance < 5) {\n          results[key] = { ...this.state.allBoards[key], included: false, DLdistance: DLdistance }\n        }\n      }\n    })\n    console.log(results)\n    this.setState({ loaded: true, searchBoardResults: results, loading: false })\n\n  }\n\n  /**\n   * Handle the search of movies or boards.\n   * @param {*} event\n   */\n  handleSearch = async (event) => {\n    if (event.key === 'Enter') {\n      if (this.state.toggleBM.type == 'movies') {\n        this.setState({ search: true, loading: true })\n        await this.searchMovie()\n      } else {\n        this.setState({ search: true, loading: true })\n        await this.searchBoard()\n      }\n    }\n  }\n\n  /**\n   * Change between type of discovery\n   */\n  toggleBoardsMovies = () => {\n    if (this.state.toggleBM.type == 'movies') {\n      this.setState({\n        toggleBM: {\n          type: 'boards',\n          colors: ['#525252', '#D40000'],\n        },\n      })\n    } else {\n      this.setState({\n        toggleBM: {\n          type: 'movies',\n          colors: ['#D40000', '#525252'],\n        },\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          backgroundColor: '#414141',\n          minHeight: window.innerHeight,\n          position: 'relative',\n        }}\n      >\n        <Header></Header>\n        <MovieInfoModal\n          cast={this.state.modalMovie.cast}\n          productionCompanies={this.state.modalMovie.productionCompanies}\n          productionCountries={this.state.modalMovie.productionCountries}\n          releaseDate={this.state.modalMovie.releaseDate}\n          movieId={this.state.modalMovie.movieId ? this.state.modalMovie.movieId : 0}\n          popOver={true}\n          userBoards={this.state.userBoards}\n          title={this.state.modalMovie.title}\n          posterPath={this.state.modalMovie.poster_path}\n          synopsis={this.state.modalMovie.synopsis}\n          addToBoard={(boardId, movieId) => {\n            addMovieToBoard(boardId, parseInt(movieId))\n          }}\n          closeModal={() => {\n            this.setState({ modalMovieIsOpen: false })\n          }}\n          isModalOpen={this.state.modalMovieIsOpen}\n        ></MovieInfoModal>\n        <div\n          style={{\n            paddingTop: 100,\n            color: '#4D4D4D',\n            fontSize: 20,\n            textAlign: 'center',\n          }}\n        >\n          <div style={{ flexDirection: 'row', display: 'flex', paddingTop: 0, color: 'white', fontSize: 30 }}>\n            <div style={{ width: '33%', verticalAlign: 'center' }}>\n              <div\n                style={{\n                  flexDirection: 'row',\n                  display: 'flex',\n                  width: 200,\n                  height: 30,\n                  fontSize: 20,\n                  fontWeight: 'normal',\n                  marginLeft: '5%',\n                }}\n              >\n                <div\n                  onClick={this.toggleBoardsMovies}\n                  style={{ width: '50%', backgroundColor: this.state.toggleBM.colors[0] }}\n                >\n                  Movies\n                </div>\n                <div\n                  onClick={this.toggleBoardsMovies}\n                  style={{ width: '50%', backgroundColor: this.state.toggleBM.colors[1] }}\n                >\n                  Boards\n                </div>\n              </div>\n            </div>\n            <div\n              style={{ width: '33%', fontWeight: 'bold', letterSpacing: '0.2em' }}\n              onClick={() => this.setState({ search: false, searchText: '' })}\n            >\n              Discover\n            </div>\n            <div style={{ width: '33%', textAlign: 'right', paddingRight: '5%' }}>\n              <input\n                style={{\n                  width: '50%',\n                  backgroundColor: '#525252',\n                  color: 'white',\n                  fontFamily: 'Poppins',\n                  borderWidth: 0,\n                  borderRadius: 24,\n                  outline: 'none',\n                  padding: 5,\n                }}\n                type=\"text\"\n                placeholder=\"Search\"\n                value={this.state.searchText}\n                onChange={this.changeSearch}\n                onKeyDown={this.handleSearch}\n              />\n            </div>\n          </div>\n        </div>\n        {this.state.loading && (\n          <div style={{ paddingLeft: '45%' }}>\n            <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\n          </div>\n        )}\n\n        {/* \n        * Movies discovery\n        */}\n\n        {!this.state.search && this.state.toggleBM.type == \"movies\" &&\n          Object.keys(this.state.discoverMovies).map((category, i) => {\n            return (\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  flexWrap: 'nowrap',\n                  overflowX: 'auto',\n                  padding: 10,\n                  backgroundColor: '#4D4D4D',\n                  marginTop: 50,\n                }}\n              >\n                {this.state.discoverMovies[category].map((movie, index) => {\n                  return (\n                    <div style={{ margin: 10 }} onClick={() => this.openModal(movie.id)}>\n                      <Movie\n                        title={movie.title}\n                        voteAverage={movie.vote_average}\n                        posterPath={movie.poster_path}\n                      ></Movie>\n                    </div>\n                  )\n                })}\n                <div\n                  style={{\n                    position: 'absolute',\n                    top: 178 + i * 316,\n                    left: 20,\n                    color: '#8C8C8C',\n                    fontFamily: 'Poppins',\n                    fontWeight: 'bolder',\n                    fontSize: 20,\n                  }}\n                >\n                  {category}\n                </div>\n              </div>\n            )\n          })}\n\n\n        {/*\n        * Board discovery\n        */}\n\n        {!this.state.search && this.state.toggleBM.type != \"movies\" &&\n          <div>\n            <div style={{\n              position: 'absolute',\n              top: 178,\n              left: 20,\n              color: '#8C8C8C',\n              fontFamily: 'Poppins',\n              fontWeight: 'bolder',\n              fontSize: 20,\n\n            }}>All boards</div>\n            <div style={{\n              width: 'auto',\n              flexWrap: 'wrap',\n              display: 'flex',\n              flexDirection: 'row',\n              backgroundColor: '#4D4D4D',\n              padding: 20,\n              marginTop: 50,\n            }}>\n              {!this.state.allBoardsLoaded &&\n                <div style={{ paddingLeft: '45%' }}>\n                  <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\n                </div>}\n              {this.state.allBoardsLoaded &&\n\n                Object.keys(this.state.allBoards).map((boardId) => {\n                  return (\n                    <NavLink\n                      to={{\n                        pathname: \"/board/\" + boardId,\n                        aboutProps: { state: { boardInfo: this.state.allBoards[boardId] } }\n                      }}\n\n                      style={{ textDecoration: \"none\" }}\n                    >\n                      <div style={{\n                        margin: 10,\n                      }} key={boardId}>\n                        <BoardView\n                          name={this.state.allBoards[boardId].title}\n                          nStars={this.state.allBoards[boardId].nStars}\n                          postersPath={this.state.allBoards[boardId].posters}\n                        ></BoardView>\n                      </div>\n                    </NavLink>\n                  )\n                })}\n            </div>\n          </div>}\n\n\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            flexWrap: 'nowrap',\n            overflowX: 'auto',\n            padding: 10,\n            backgroundColor: '#4D4D4D',\n            marginTop: 50,\n          }}\n        >\n          {!this.state.loading &&\n            this.state.search &&\n            this.state.loaded &&\n            this.state.toggleBM.type == \"movies\" &&\n            this.state.searchResults.length > 0 &&\n            this.state.searchResults.map((movie, index) => {\n              console.log(\"hello\")\n              return (\n                <div style={{ margin: 10 }} onClick={() => this.openModal(movie.id)}>\n                  <Movie\n                    title={movie.title}\n                    voteAverage={movie.vote_average}\n                    posterPath={movie.poster_path}\n                  ></Movie>\n                </div>\n              )\n            })\n          }\n\n          {!this.state.loading &&\n            this.state.search &&\n            this.state.loaded &&\n            this.state.toggleBM.type != \"movies\" &&\n            Object.keys(this.state.searchBoardResults).length > 0 &&\n            Object.keys(this.state.searchBoardResults).map((boardId, index) => {\n              return (\n                <NavLink\n                  to={{\n                    pathname: \"/board/\" + boardId,\n                    aboutProps: { state: { boardInfo: this.state.searchBoardResults[boardId] } }\n                  }}\n\n                  style={{ textDecoration: \"none\" }}\n                >\n                  <div style={{\n                    margin: 10,\n                  }} key={boardId}>\n                    <BoardView\n                      name={this.state.searchBoardResults[boardId].title}\n                      nStars={this.state.searchBoardResults[boardId].nStars}\n                      postersPath={this.state.searchBoardResults[boardId].posters}\n                    ></BoardView>\n                  </div>\n                </NavLink>\n              )\n            })}\n        </div >\n      </div>\n    )\n  }\n}\nexport default Discovery\n","/Users/cyrie/Documents/dev/Smovies/src/Pages/Board.jsx",["118"],"import React, { Component } from 'react'\nimport { getBoardPosters, getMoviesInfo } from '../helpers/movieDatabase.js'\nimport BoardView from '../reusable-components/BoardView.js'\nimport Movie from '../reusable-components/MovieView.js'\nimport Header from './../reusable-components/Header.js'\nimport { auth, database } from './../services/firebase.js'\nimport MovieInfoModal from './../reusable-components/MovieInfoModal.js'\nimport ReactLoading from 'react-loading'\nimport { addMovieToBoard, removeMovieFromBoard } from '../helpers/database.js'\nimport Toggle from \"react-toggle\"\nimport \"react-toggle/style.css\"\n\nconst axios = require('axios')\n\nclass Board extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      edit: false,\n      boardId: null,\n      boardInfo: {},\n      moviesInfo: {},\n      loaded: false,\n      modalMovieIsOpen: false,\n      modalMovieInfo: {\n        poster_path: null,\n        title: null,\n        synopsis: null,\n        voteAverage: null,\n        movieId: null,\n        cast: null,\n        productionCompanies:null,\n        productionCountries:null,\n        releaseDate:null,\n      },\n      searchText: '',\n      searchResults: [],\n      searchLoaded: false,\n      searchLoading: false,\n      searchResultsAdded: {},\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ boardId: this.props.match.params.id })\n    this.getBoardInfo()\n  }\n\n  getBoardInfo = async () => {\n    database.ref(`boards/${this.props.match.params.id}`).on('value', (snapshot) => {\n      this.setState({ boardInfo: snapshot.val() })\n      var movies = snapshot.val().movies\n      getBoardPosters(movies).then((posters_path) => {\n        var boardPosters = { boardPosters: posters_path }\n        this.setState({ boardInfo: { ...this.state.boardInfo, ...boardPosters } })\n        getMoviesInfo(movies).then((moviesInfo) => {\n          this.setState({ moviesInfo: { ...moviesInfo, }, loaded: true })\n        })\n      })\n    })\n  }\n\n  openModal = async (id, type, movieInfo = null) => {\n    if (type == \"inBoard\") {\n      this.setState({ modalMovieInfo: { ...this.state.moviesInfo[id], movieId: id }, modalMovieIsOpen: true })\n    } else if (type == \"search\") {\n      this.setState({ modalMovieInfo: { ...movieInfo, movieId: id }, modalMovieIsOpen: true })\n    } else {\n      console.log(\"Wrong type\")\n    }\n  }\n\n  changeSearch = (event) => {\n    this.setState({ searchText: event.target.value })\n  }\n\n  /**\n   * Find a movie in the Movie database\n   */\n  searchMovie = async () => {\n    try {\n      const movies = await axios.get('https://api.themoviedb.org/3/search/movie', {\n        params: {\n          api_key: process.env.REACT_APP_MOVIES_API_KEY,\n          language: 'en_US',\n          query: this.state.searchText,\n        },\n      })\n      var searchMoviesTemp = {}\n      for (var movie of movies.data.results) {\n        searchMoviesTemp[movie.id] = false\n      }\n      this.setState({ searchLoaded: true, searchResults: movies.data.results, searchLoading: false, searchResultsAdded: searchMoviesTemp })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n   * Handle the search of movies or boards.\n   * @param {*} event\n   */\n  handleSearch = async (event) => {\n    if (event.key === 'Enter') {\n      this.setState({ searchLoading: true })\n      await this.searchMovie()\n    }\n  }\n\n  addMovie = (movieId) => {\n    if (movieId != null) {\n      if (this.state.boardInfo.movies.includes(movieId)) {\n        console.log(\"Already in the list\")\n        this.setState({ searchResultsAdded: { ...this.state.searchResultsAdded, [movieId]: true } })\n      } else {\n        addMovieToBoard(this.props.match.params.id, movieId)\n        console.log(\"Added to the list!\")\n        this.setState({ searchResultsAdded: { ...this.state.searchResultsAdded, [movieId]: true } })\n      }\n    } else {\n      console.log('MovieId null')\n    }\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          backgroundColor: '#414141',\n          minHeight: window.innerHeight,\n          position: 'relative',\n        }}\n      >\n        <Header></Header>\n        <MovieInfoModal\n          cast={this.state.modalMovieInfo.cast}\n          productionCompanies={this.state.modalMovieInfo.productionCompanies}\n          productionCountries={this.state.modalMovieInfo.productionCountries}\n          releaseDate={this.state.modalMovieInfo.releaseDate}\n          title={this.state.modalMovieInfo.title}\n          posterPath={this.state.modalMovieInfo.poster}\n          synopsis={this.state.modalMovieInfo.synopsis}\n          addToBoard={() => {\n            this.addMovie(this.state.modalMovieInfo.movieId)\n          }}\n          closeModal={() => {\n            this.setState({ modalMovieIsOpen: false })\n          }}\n          isModalOpen={this.state.modalMovieIsOpen}\n        ></MovieInfoModal>\n        <div style={{ paddingTop: 100 }}></div>\n        {!this.state.loaded &&\n          <div style={{ paddingLeft: '45%' }}>\n            <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\n          </div>\n        }\n        {this.state.loaded &&\n          <div>\n            <div style={{\n              margin: 20,\n              flexDirection: 'row',\n              display: \"flex\"\n            }}>\n              <div\n                style={{\n                  width: 400,\n                  marginLeft: 100,\n                }}>\n                <BoardView\n                  name={this.state.boardInfo.title}\n                  nStars={this.state.boardInfo.nStars}\n                  postersPath={this.state.boardInfo.boardPosters}\n                  hideBanner={true}\n                  width={156 * 2}\n                  height={210 * 2}\n                  filter={\"drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25))\"}\n                  zIndec={2}></BoardView>\n              </div>\n              <div style={{\n                width: 900,\n                fontFamily: 'Poppins',\n                color: '#D4D4D4',\n                fontSize: 15,\n              }}>\n                <div style={{\n                  fontWeight: 'bolder',\n                  fontSize: 30,\n                  color: 'white',\n                  textAlign: 'left'\n                }}>{this.state.boardInfo.title}</div>\n                <div style={{\n                  fontFamily: 'Poppins',\n                  fontWeight: 'normal',\n                  textAlign: 'left'\n                }}>Created by: user#{this.state.boardInfo.createdBy.slice(-5)}</div>\n                <div style={{ height: 250, width: '100%', color: '#7C7C7C', paddingTop: 20 }}>Description not available</div>\n                <div style={{ flexDirection: 'row', display: 'flex', }}>\n                  <div style={{ width: '15%' }}>{this.state.boardInfo.movies.length} movies </div>\n                  <div style={{ width: '15%' }}>{this.state.boardInfo.nStars} stars </div>\n                  <div style={{ width: '20%' }}> Last update: {(\"0\" + new Date(this.state.boardInfo.lastUpdate).getDate()).slice(-2)}/{(\"0\" + new Date(this.state.boardInfo.lastUpdate).getMonth() + 1).slice(-2)}/{new Date(this.state.boardInfo.lastUpdate).getFullYear()}</div>\n                </div>\n              </div>\n            </div>\n            <div>\n              <div style={{\n                display: 'flex',\n                flexDirection: \"row\"\n              }}>\n                <div style={{\n                  width: \"85%\",\n                  textAlign: 'left',\n                  color: '#8C8C8C',\n                  fontFamily: 'Poppins',\n                  fontWeight: 'bolder',\n                  fontSize: 20,\n                  margin: 20\n                }}>Movies</div>\n                <div style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  width: \"5%\",\n                  color: '#8C8C8C',\n                  fontFamily: 'Poppins',\n                  fontWeight: 'normal',\n                  textDecoration: '#8C8C8C underline',\n                  fontSize: 20,\n                  textAlign: 'right',\n                }}>Edit</div>\n                <div style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  width: '10%',\n                  textAlign: 'left',\n                }}>\n                  <Toggle\n                    defaultChecked={this.state.edit}\n                    onChange={() => { this.setState({ edit: !this.state.edit }) }}\n                  />\n                </div>\n              </div>\n              <div style={{\n                width: 'auto',\n                flexWrap: 'wrap',\n                display: 'flex',\n                flexDirection: 'row',\n                backgroundColor: '#4D4D4D',\n                padding: 20\n              }}>\n                {Object.keys(this.state.moviesInfo).map((movieId) => {\n                  return (\n                    <div>\n                      <div style={{ margin: 10 }} onClick={() => this.openModal(movieId, \"inBoard\")}>\n                        <Movie\n                          title={this.state.moviesInfo[movieId].title}\n                          voteAverage={this.state.moviesInfo[movieId].vote_average}\n                          posterPath={this.state.moviesInfo[movieId].poster}\n                        ></Movie>\n                      </div>\n                      {this.state.edit &&\n                        <div\n                          style={{\n                            margin: 10,\n                            marginLeft: '25%',\n                            color: \"white\",\n                            fontFamily: 'Poppins',\n                            fontSize: 15,\n                            textAlign: \"center\",\n                            width: '50%',\n                            textDecoration: \"white underline\"\n                          }}\n                          onClick={() => { removeMovieFromBoard(this.state.boardId, movieId) }}>\n                          Remove\n                        </div>}\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n            <div>\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: 50 }}>\n                <div style={{\n                  width: 1200,\n                  color: '#8C8C8C',\n                  fontFamily: 'Poppins',\n                  fontWeight: 'bolder',\n                  fontSize: 20,\n                  margin: 20,\n                  marginBottom: 0\n                }}>Add to the board: </div>\n                <div style={{\n                  width: 200,\n                  margin: 20,\n                  marginBottom: 0\n                }}>\n                  <input\n                    style={{\n                      backgroundColor: '#525252',\n                      color: 'white',\n                      fontFamily: 'Poppins',\n                      borderWidth: 0,\n                      borderRadius: 24,\n                      outline: 'none',\n                      padding: 5,\n                    }}\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    value={this.state.searchText}\n                    onChange={this.changeSearch}\n                    onKeyDown={this.handleSearch}\n                  />\n                </div>\n              </div>\n\n              {this.state.searchLoading && (\n                <div style={{ paddingLeft: '45%' }}>\n                  <ReactLoading type={'bubbles'} color=\"white\" height={'10%'} width={'10%'} />\n                </div>\n              )}\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  flexWrap: 'nowrap',\n                  overflowX: 'auto',\n                  padding: 10,\n                  backgroundColor: '#4D4D4D',\n                  marginTop: 20,\n                }}\n              >\n                {!this.state.searchLoaded &&\n                  <div style={{ minHeight: 210 }}></div>}\n                {!this.state.searchLoading &&\n                  this.state.searchLoaded &&\n                  this.state.searchResults.length > 0 &&\n                  this.state.searchResults.map((movie, index) => {\n                    return (\n                      <div style={{ margin: 10 }} onClick={() => {\n                        this.openModal(movie.id, \"search\",\n                          {\n                            title: movie.title,\n                            vote_average: movie.vote_average,\n                            poster: movie.poster_path,\n                            synopsis: movie.overview\n                          })\n                      }}>\n                        <Movie\n                          title={movie.title}\n                          voteAverage={movie.vote_average}\n                          posterPath={movie.poster_path}\n                        ></Movie>\n                        {this.state.searchResultsAdded[movie.id] &&\n                          <div style={{\n                            backgroundColor: \"#D40000\",\n                            position: \"relative\",\n                            top: -200,\n                            left: 10,\n                            padding: 5,\n                            fontSize: 10,\n                            textAlign: \"center\",\n                            width: \"30%\",\n                            borderRadius: 14,\n                            margin: 0,\n                            color: 'white',\n                            fontFamily: \"Poppins\"\n                          }}>\n                            Added ✓</div>}\n                      </div>\n                    )\n                  })}\n              </div>\n            </div>\n          </div>}\n        <div style={{ width: \"auto\", height: 100, paddingTop: 40, color: \"#D4D4D4\", fontFamily: \"Poppins\", fontSize: 15, textAlign: \"center\" }}> Smovies Copyright 2021 ©</div>\n      </div>\n    )\n  }\n}\nexport default Board\n","/Users/cyrie/Documents/dev/Smovies/src/reusable-components/Header.js",["119","120"],"/Users/cyrie/Documents/dev/Smovies/src/Pages/Feed.jsx",["121"],"/Users/cyrie/Documents/dev/Smovies/src/Pages/404.jsx",[],"/Users/cyrie/Documents/dev/Smovies/src/Pages/Login.jsx",["122","123"],"import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { signin, sendPasswordReset } from '../helpers/auth.js'\nimport { updateUser } from '../helpers/database.js'\nimport { auth } from '../services/firebase.js'\nimport Modal from 'react-modal'\n\n\nfunction utcTimestampToDateString(timestamp) {\n  try {\n    // Convert to date object.\n    const date = new Date(Number(timestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n\nexport default class Login extends Component {\n  constructor() {\n    super()\n    this.state = {\n      error: null,\n      email: '',\n      password: '',\n      loading: false,\n      resetEmailSent: false,\n      isModalOpen: false,\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.user = auth().currentUser\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  async handleSubmit(event) {\n    this.setState({ loading: true })\n    event.preventDefault()\n    this.setState({ error: '' })\n    try {\n      await signin(this.state.email, this.state.password)\n      await updateUser({ lastConnection: utcTimestampToDateString(Date.now()) })\n    } catch (error) {\n      this.setState({ error: error.message })\n    }\n  }\n  closeModal = () => {\n    this.setState({ isModalOpen: false })\n  }\n  resetPassword = (email) => {\n    sendPasswordReset(email, () => {\n      this.setState({ resetEmailSent: true })\n      //setTimeout(() => { this.setState({ resetEmailSent: false }), 20000 })\n    },\n      (error) => { console.log(error) }\n    )\n  }\n\n\n  render() {\n    return (\n      <div\n        style={{\n          backgroundColor: '#414141',\n          height: window.innerHeight,\n          position: 'relative',\n          width: '100%',\n          fontFamily: 'Poppins',\n          backgroundImage: 'url(' + '/cinema.jpg' + ')',\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n        }}\n      >\n        <Modal\n          isOpen={this.state.isModalOpen}\n          onRequestClose={this.closeModal}\n          style={{\n            overlay: { backgroundColor: 'rgba(65, 65, 65, 0.01)', backdropFilter: 'blur(10px)', },\n            content: {\n              left: null,\n              top: 90,\n              right: null,\n              bottom: null,\n              width: \"50%\",\n              marginLeft: '25%',\n              backgroundColor: '#DADADA',\n              boxShadow: '0px 0px 45px 25px rgba(0, 0, 0, 0.25)',\n              borderWidth: 0,\n              borderRadius: 24,\n            },\n          }}\n        >\n          <div\n            style={{\n              fontFamily: 'Poppins',\n              color: 'white',\n              textAlign: 'center',\n              padding: 25,\n\n            }}\n          >\n            <div style={{ fontSize: 32, color: \"black\", textAlign: 'center', fontWeight: \"bolder\" }}>Reset Password</div>\n            <div style={{ fontSize: 16, color: \"black\", textAlign: 'center', marginTop: 25 }}>Enter the email address associated with your account.</div>\n            <div>\n              <input\n                style={{\n                  marginTop: 25,\n                  width: '75%',\n                  backgroundColor: 'white',\n                  color: 'black',\n                  fontFamily: 'Poppins',\n                  borderWidth: 0,\n                  borderRadius: 24,\n                  outline: 'none',\n                  padding: 15,\n                }}\n                placeholder=\"Email\"\n                name=\"email\"\n                type=\"email\"\n                onChange={this.handleChange}\n                value={this.state.email}\n              ></input>\n            </div>\n            {!this.state.resetEmailSent &&\n              <div\n                onClick={() => {\n                  if (this.state.email != null) {\n                    this.resetPassword(this.state.email)\n                  } else {\n                    console.log(\"email null\")\n                  }\n                }}\n                style={{\n                  width: '50%',\n                  marginLeft: '25%',\n                  backgroundColor: '#D40000',\n                  fontSize: 20,\n                  borderWidth: 0,\n                  borderRadius: 24,\n                  padding: 5,\n                  marginTop: 50,\n                  marginBottom: 50,\n                  color: 'white',\n                  boxShadow: '0px 0px 10px grey',\n                }}\n              >\n                Reset password\n                    </div>}\n            {this.state.resetEmailSent &&\n              <div style={{\n                color: 'black',\n                fontSize: 15,\n                marginTop: 25,\n              }}>An email has been sent to your email address.</div>}\n            <div style={{ color: \"black\", textDecoration: \"black underline\" }} onClick={this.closeModal}>← Back to login</div>\n          </div>\n\n        </Modal>\n        <div\n          style={{\n            color: '#D40000',\n            fontSize: 50,\n            fontWeight: 'bolder',\n            letterSpacing: '0.2em',\n            alignItems: 'center',\n            paddingTop: 15,\n            display: 'flex',\n            flexDirection: 'column',\n            textAlign: 'center',\n          }}\n        >\n          Smovies\n        </div>\n        <div\n          style={{\n            backgroundColor: '#DADADA',\n            width: '50%',\n            marginLeft: '25%',\n            padding: 25,\n            textAlign: 'center',\n            borderRadius: 24,\n          }}\n        >\n          <div>\n            <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n              <h1>Login</h1>\n              <p>Fill in the form below to login to your account.</p>\n              <div>\n                <input\n                  style={{\n                    width: '75%',\n                    backgroundColor: 'white',\n                    color: 'black',\n                    fontFamily: 'Poppins',\n                    borderWidth: 0,\n                    borderRadius: 24,\n                    outline: 'none',\n                    padding: 15,\n                  }}\n                  placeholder=\"Email\"\n                  name=\"email\"\n                  type=\"email\"\n                  onChange={this.handleChange}\n                  value={this.state.email}\n                ></input>\n              </div>\n              <div>\n                <input\n                  style={{\n                    marginTop: 25,\n                    width: '75%',\n                    backgroundColor: 'white',\n                    color: 'black',\n                    fontFamily: 'Poppins',\n                    borderWidth: 0,\n                    borderRadius: 24,\n                    outline: 'none',\n                    padding: 15,\n                  }}\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  onChange={this.handleChange}\n                  value={this.state.password}\n                  type=\"password\"\n                ></input>\n              </div>\n              <div style={{ textDecoration: \"black underline\", marginTop:25 }} onClick={() => { this.setState({ isModalOpen: true }) }}>Forgot password?</div>\n              <div>\n                {this.state.error ? <p>{this.state.error}</p> : null}\n                {this.state.loading ? (\n                  <div marginTop={25}>Loading...</div>\n                ) : (\n                    <button\n                      style={{\n                        width: '20%',\n                        backgroundColor: '#D40000',\n                        fontSize: 30,\n                        borderWidth: 0,\n                        borderRadius: 24,\n                        padding: 5,\n                        marginTop: 25,\n                        marginBottom: 50,\n                        color: 'white',\n                        boxShadow: '0px 0px 10px grey',\n                      }}\n                    >\n                      Log in\n                    </button>\n                  )}\n              </div>\n              <p>\n                Don't have an account? <Link to=\"/signup\">Register</Link>\n              </p>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","/Users/cyrie/Documents/dev/Smovies/src/Pages/Signup.jsx",["124","125"],"import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { signup } from '../helpers/auth'\nimport { createUser } from '../helpers/database'\nimport { auth } from '../services/firebase'\n\nexport default class SignUp extends Component {\n  constructor() {\n    super()\n    this.state = {\n      error: null,\n      email: '',\n      password: '',\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault()\n    this.setState({ error: '' })\n    try {\n      await signup(this.state.email, this.state.password).then(async() =>{ createUser(auth().currentUser)})\n      await auth().currentUser.sendEmailVerification()\n    } catch (error) {\n      this.setState({ error: error.message })\n    }\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          backgroundColor: '#414141',\n          height: window.innerHeight,\n          position: 'relative',\n          width: '100%',\n          fontFamily: 'Poppins',\n          backgroundImage: 'url(' + '/cinema.jpg' + ')',\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n        }}\n      >\n        <div\n          style={{\n            color: '#D40000',\n            fontSize: 50,\n            fontWeight: 'bolder',\n            letterSpacing: '0.2em',\n            alignItems: 'center',\n            paddingTop: 15,\n            display: 'flex',\n            flexDirection: 'column',\n            textAlign: 'center',\n          }}\n        >\n          Smovies\n        </div>\n        <div\n          style={{\n            backgroundColor: '#DADADA',\n            width: '50%',\n            marginLeft: '25%',\n            padding: 25,\n            textAlign: 'center',\n            borderRadius: 24,\n          }}\n        >\n          <div>\n            <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n              <h1>Register</h1>\n              <p>Fill in the form below to create your account.</p>\n              <div>\n                <input\n                  style={{\n                    width: '75%',\n                    backgroundColor: 'white',\n                    color: 'black',\n                    fontFamily: 'Poppins',\n                    borderWidth: 0,\n                    borderRadius: 24,\n                    outline: 'none',\n                    padding: 15,\n                  }}\n                  placeholder=\"Email\"\n                  name=\"email\"\n                  type=\"email\"\n                  onChange={this.handleChange}\n                  value={this.state.email}\n                ></input>\n              </div>\n              <div>\n                <input\n                  style={{\n                    marginTop: 25,\n                    width: '75%',\n                    backgroundColor: 'white',\n                    color: 'black',\n                    fontFamily: 'Poppins',\n                    borderWidth: 0,\n                    borderRadius: 24,\n                    outline: 'none',\n                    padding: 15,\n                  }}\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  onChange={this.handleChange}\n                  value={this.state.password}\n                  type=\"password\"\n                ></input>\n              </div>\n              <div>\n                {this.state.error ? <p>{this.state.error}</p> : null}\n                {this.state.loading ? (\n                  <div marginTop={25}>Loading...</div>\n                ) : (\n                  <button\n                    style={{\n                      width: '20%',\n                      backgroundColor: '#D40000',\n                      fontSize: 30,\n                      borderWidth: 0,\n                      borderRadius: 24,\n                      padding: 5,\n                      marginTop: 25,\n                      marginBottom: 50,\n                      color: 'white',\n                      boxShadow: '0px 0px 10px grey',\n                    }}\n                  >\n                    Sign up\n                  </button>\n                )}\n              </div>\n              <p>\n                Already have an account? <Link to=\"/login\">Log in</Link>\n              </p>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","/Users/cyrie/Documents/dev/Smovies/src/Pages/MyAccount.jsx",["126","127","128","129","130","131","132"],"import React, { Component } from 'react'\nimport { getBoardPosters, getMoviesInfo } from '../helpers/movieDatabase.js'\nimport { auth, database } from './../services/firebase.js'\nimport ReactLoading from 'react-loading'\nimport { addMovieToBoard, getUserInfo } from '../helpers/database.js'\nimport Header from './../reusable-components/Header.js'\nconst axios = require('axios')\n\nclass MyAccount extends Component {\n    constructor(props) {\n        super(props)\n        this.state={\n            info:null,\n\n        }\n    }\n\n    componentDidMount() {\n        getUserInfo((info)=>{this.setState({info:info})})\n\n    }\n\n    render() {\n        return (\n            <div\n                style={{\n                    backgroundColor: '#414141',\n                    height: window.innerHeight,\n                    position: 'relative',\n                    fontFamily:'Poppins',\n                }}\n            >\n                <Header></Header>\n                <div style={{paddingTop:150}}></div>\n\n            </div>\n        )\n    }\n}\nexport default MyAccount;","/Users/cyrie/Documents/dev/Smovies/src/services/firebase.js",[],"/Users/cyrie/Documents/dev/Smovies/src/reusable-components/BoardView.js",["133","134"],"/**\n * To do:\n *  - Changer l'étoile avec une étoile toggle connectée à Firebase\n *\n */\n\nexport default function BoardView({ name, nStars, postersPath, hideBanner = false, ...props }) {\n  if (postersPath != undefined) {\n    return (\n      <div\n        style={{\n          width: 156,\n          height: 210,\n          fontFamily: 'Poppins',\n          fontSize: 15,\n          flexWrap: 'wrap',\n          filter:\"drop-shadow(0px 4px 10px rgba(255, 255, 255, 0.05))\",\n          ...props,\n\n        }}\n      >\n        <div\n          style={{\n            height: JSON.stringify(180*100/210)+'%',\n            flexWrap: 'wrap',\n            flexDirection: 'row',\n            display: 'flex',\n          }}\n        >\n          {postersPath.map((moviePoster, index) => {\n            return (\n              <div style={{ height: '50%', width: '50%', display: 'flex' }} key={moviePoster + JSON.stringify(index)}>\n                {moviePoster !== null &&\n                  <img\n                    src={'https://image.tmdb.org/t/p/original' + moviePoster}\n                    width={'100%'}\n                    height={'100%'}\n                    style={{ objectFit: 'cover', objectPosition: '100% 0' }}\n                  />}\n                {moviePoster == null &&\n                  <div style={{ width: '100%', height: '100%', color: 'grey', backgroundColor: \"#575757\" }}>No Poster</div>}\n              </div>\n            )\n          })}\n        </div>\n        {!hideBanner &&\n          <div\n            style={{\n              backgroundColor: '#414141',\n              display: 'flex',\n              flexDirection: 'row',\n              width: '100%',\n              height: 30,\n              color: 'white',\n            }}\n          >\n            <div style={{ width: '50%', paddingLeft: 5, textAlign: \"left\" }}>{name.length < 8 ? name : name.slice(0, 7) + '...'}</div>\n            <div style={{ width: '50%', textAlign: 'right' }}>{nStars + '🌟'}</div>\n          </div>}\n      </div>\n    )\n  } else {\n    return <div></div>\n  }\n}\n","/Users/cyrie/Documents/dev/Smovies/src/reusable-components/MovieView.js",["135"],"/**\n * To do:\n *  - Changer l'étoile avec une étoile toggle connectée à Firebase\n *\n */\n\nexport default function Movie({ title, voteAverage, posterPath, ...props }) {\n  return (\n    <div\n      style={{\n        flexWrap: 'wrap',\n        width: 156,\n        height: 210,\n        fontFamily: 'Poppins',\n        fontSize: 15,\n        filter:\"drop-shadow(0px 4px 10px rgba(255, 255, 255, 0.05))\",\n      }}\n    >\n      <div style={{ width: '100%', height: 180, backgroundColor: 'grey', borderRadius:\"14px 14px 0px 0px\", }}>\n        {posterPath != null  &&\n        <img\n          src={'https://image.tmdb.org/t/p/original' + posterPath}\n          width={'100%'}\n          height={'100%'}\n          style={{ objectFit: 'cover', objectPosition: '100% 0', borderRadius:\"14px 14px 0px 0px\" }}\n        />}\n        {posterPath == null &&\n        <div style={{height:180, width:\"100%\", paddingTop: 80, textAlign:\"center\"}}> Oops! No poster 😔</div>}\n      </div>\n      <div\n        style={{\n          backgroundColor: '#414141',\n          display: 'flex',\n          flexDirection: 'row',\n          width: '100%',\n          height: 30,\n          color: 'white',\n          borderRadius: '0px 0px 14px 14px'\n        }}\n      >\n        <div style={{ width: '50%', paddingLeft: 5 }}>{title.length < 8 ? title : title.slice(0, 7) + '...'}</div>\n        <div style={{ width: '50%', textAlign: 'right' }}>{voteAverage + '/10 🌟'}</div>\n      </div>\n    </div>\n  )\n}\n","/Users/cyrie/Documents/dev/Smovies/src/reusable-components/CreateBoardModal.js",[],"/Users/cyrie/Documents/dev/Smovies/src/reusable-components/MovieInfoModal.js",["136"],"import Modal from 'react-modal'\nimport Popover from 'react-awesome-popover'\nimport ActorView from \"./ActorView.js\"\n\nexport default function MovieInfoModal({ title, synopsis, posterPath, addToBoard, closeModal, isModalOpen, cast, productionCompanies, productionCountries, releaseDate, movieId = undefined, userBoards = undefined, popOver = false, ...props }) {\n  Modal.setAppElement('body')\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      onRequestClose={closeModal}\n      style={{\n        overlay: { backgroundColor: 'rgba(65, 65, 65, 0.01)', backdropFilter: 'blur(10px)', },\n        content: {\n          marginTop: 60,\n          marginBottom: 10,\n          marginLeft: 60,\n          marginRight: 60,\n          backgroundColor: '#414141',\n          boxShadow: '0px 0px 45px 25px rgba(0, 0, 0, 0.25)',\n          borderWidth: 0,\n          borderRadius: 0,\n        },\n      }}\n    >\n      <div\n        style={{\n          backgroundColor: '#414141',\n          fontFamily: 'Poppins',\n          color: 'white',\n          padding: 10,\n          flexDirection: 'row',\n          display: 'flex',\n        }}\n      >\n        <div style={{ width: '25%' }}>\n          <img\n            src={'https://image.tmdb.org/t/p/original' + posterPath}\n            width={'100%'}\n            height={'auto'}\n            style={{ filter: 'drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25))', borderRadius: 17 }}\n          />\n        </div>\n        <div style={{ width: '70%', textAlign: 'left', marginLeft: 100 }}>\n          <div style={{ fontSize: 40, textAlign: 'center', fontFamily: 'Playfair Display' }}>\n            {title}\n          </div>\n          <div style={{ fontSize: 15, maxWidth: '80%', marginTop: 20 }}>\n            <div style={{ fontWeight: 'bolder', fontSize: 20 }}>Synopsis:</div>\n            {synopsis}\n            <div style={{ fontWeight: 'bolder', marginTop: 20, fontSize: 20 }}> More information:</div>\n            {productionCompanies != null && <div><div style={{ color: \"#8D8D8D\" }}>Production: <div style={{ color: \"white\" }}>{productionCompanies == null ? \"\" : productionCompanies[0].name}</div> </div>\n              <div style={{ color: \"#8D8D8D\" }}>Release Date: <div style={{ color: \"white\" }}>{releaseDate}</div></div></div>}\n          </div>\n        </div>\n      </div>\n      {cast != null &&\n        <div>\n          <div style={{\n            marginTop: 50,\n            fontFamily: \"Poppins\",\n            fontSize: 15,\n            fontWeight: \"bolder\",\n            color: \"white\",\n            paddingLeft: 10\n          }}>Main 5 actors:</div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              flexWrap: 'nowrap',\n              overflowX: 'auto',\n              padding: 10,\n              backgroundColor: '#4D4D4D',\n              marginTop: 10,\n            }}\n          >\n            {cast.slice(0, 5).map((actor) => {\n              return (\n                <div style={{ margin: 10 }}>\n                  <ActorView name={actor.name} posterPath={actor.profile_path}></ActorView>\n                </div>\n              )\n            })}\n          </div>\n        </div>}\n      <div style={{ display: 'flex', flexDirection: 'row', marginTop: 20 }}>\n        <div style={{ width: '50%' }}>\n          <button\n            style={{\n              backgroundColor: '#4C4C4C',\n              borderRadius: 31,\n              borderWidth: 0,\n              padding: 10,\n              fontSize: 20,\n              color: 'white',\n              width: '50%',\n              textAlign: 'center',\n            }}\n            onClick={closeModal}\n          >\n            ← Back to movies\n          </button>\n        </div>\n        <div style={{ width: '50%', justifyContent: 'flex-end', display: 'flex' }}>\n          {!popOver && <button\n            style={{\n              backgroundColor: '#D40000',\n              borderRadius: 31,\n              borderWidth: 0,\n              padding: 10,\n              fontSize: 20,\n              color: 'white',\n              width: '50%',\n              textAlign: 'center',\n            }}\n            onClick={addToBoard}\n          >\n            + Add to board\n          </button>}\n          {popOver &&\n            <Popover\n              placement={\"left-center\"}\n              arrow={false}>\n              <button\n                style={{\n                  backgroundColor: '#D40000',\n                  borderRadius: 31,\n                  borderWidth: 0,\n                  padding: 10,\n                  fontSize: 20,\n                  color: 'white',\n                  width: '100%',\n                  textAlign: 'center',\n                }}\n              >\n                + Add to board\n              </button>\n              <div style={{\n                backgroundColor: 'white',\n                color: \"black\",\n                margin: 10,\n                borderRadius: 14,\n                width: 300,\n                padding: 10\n              }}>\n                <div style={{ fontSize: 20, textDecoration: 'black underline', textAlign: 'center' }}> My Boards</div>\n                {Object.keys(userBoards).map((boardId) => {\n                  return (\n                    <div style={{\n                      display: 'flex',\n                      flexDirection: 'row',\n                      padding: 10,\n                      alignItems: \"center\",\n                      justifyContent: 'center'\n                    }}>\n                      <div style={{ width: \"75%\", fontSize: 15 }}>{userBoards[boardId].title}</div>\n                      <div style={{ width: \"25%\", fontSize: 30, textAlign: \"right\" }} onClick={() => { addToBoard(boardId, movieId) }}>\n                        {userBoards[boardId].movies.includes(movieId) ? \"✓\" : \"+\"}</div>\n                    </div>\n                  )\n                })}\n              </div>\n            </Popover>}\n        </div>\n      </div>\n    </Modal >\n  )\n}\n","/Users/cyrie/Documents/dev/Smovies/src/helpers/database.js",["137","138","139","140","141"],"import { auth, database } from './../services/firebase.js'\nimport uuid from 'react-uuid'\n\nfunction utcTimestampToDateString(timestamp) {\n  try {\n    // Convert to date object.\n    const date = new Date(Number(timestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n\nexport async function getAllBoards(callback) {\n  database.ref(`boards`).on('value', (snapshot) => {\n    var allBoards={}\n    snapshot.forEach((snap) => {\n      allBoards[snap.key]=(snap.val())\n    })\n    callback(allBoards)\n  })\n}\n\nexport async function getUserInfo(callback) {\n  var userId = auth().currentUser\n  database.ref(`users/${userId.uid}`).on('value', async (snapshot) => {\n    callback(snapshot.val())\n  })\n}\n\nexport async function getUserBoards(callback) {\n  var userId = auth().currentUser\n  var boards = []\n  var boardsInfo = {}\n  database.ref(`users/${userId.uid}/boards`).on('value', async (snapshot) => {\n    snapshot.forEach((snap) => {\n      boards.push(snap.val())\n    })\n    if (boards.length > 1) {\n      for (const boardId of boards) {\n        database.ref(`boards/${boardId}`).on('value', (snapshot) => {\n          boardsInfo[boardId] = snapshot.val()\n          if (Object.keys(boardsInfo).length == boards.length) {\n            callback(boardsInfo)\n          }\n        })\n      }\n    } else if (boards.length == 1) {\n      var boardId = boards[0]\n      database.ref(`boards/${boardId}`).on('value', (snapshot) => {\n        callback({ [boardId]: snapshot.val() })\n      })\n    } else {\n      callback(null)\n    }\n  })\n}\n\nexport async function createBoard(board) {\n  var uid = uuid()\n  var user = auth().currentUser\n  database.ref(`boards/${uid}`).set({\n    movies: board.moviesId,\n    createdBy: user.uid,\n    nStars: 0,\n    title: board.title,\n  })\n  getUserBoards((userBoards) => {\n    if (userBoards != null && userBoards != undefined) {\n      if (!Object.keys(userBoards).includes(uid)) {\n        var updatedUserBoards = Object.keys(userBoards).concat([uid])\n        updateUser({ boards: updatedUserBoards })\n      }\n    } else {\n      updateUser({ boards: [uid] })\n    }\n  })\n\n}\n\nexport async function createUser(user) {\n  database.ref(`users/${user.uid}`).set({\n    email: user.email,\n    boards: [],\n    createdAt: user.metadata.creationTime,\n    lastConnection: user.metadata.lastSignInTime,\n    savedBoards: [],\n    savedMovies: [],\n  })\n}\n\nexport async function updateBoard(boardId, updatedValues) {\n  try {\n    database.ref(`boards/${boardId}`).update(updatedValues)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport async function addMovieToBoard(boardId, movieId) {\n  database.ref(`boards/${boardId}`).on('value', (snapshot) => {\n    var movies = [...snapshot.val().movies, movieId]\n    var moviesTemp = []\n    for (var movie of movies) {\n      if (!moviesTemp.includes(movie)) {\n        moviesTemp.push(movie)\n      }\n    }\n    updateBoard(boardId, { movies: moviesTemp, lastUpdate: utcTimestampToDateString(Date.now()) })\n  })\n}\n\nexport async function removeMovieFromBoard(boardId, movieId) {\n  database.ref(`boards/${boardId}`).on('value', (snapshot) => {\n    var movies = [...snapshot.val().movies]\n    var moviesTemp = []\n    for (var movie of movies) {\n      if (movie != movieId) {\n        if (!moviesTemp.includes(movie)) {\n          moviesTemp.push(movie)\n        }\n      }\n    }\n    updateBoard(boardId, { movies: moviesTemp, lastUpdate: utcTimestampToDateString(Date.now()) })\n  })\n}\n\nexport async function updateUser(updatedValues) {\n  var user = auth().currentUser\n  database.ref(`users/${user.uid}`).update(updatedValues)\n}\n\nexport async function deleteBoard(boardId) {\n  var user = auth().currentUser\n  database.ref(`boards/${user.uid}/${boardId}`).remove()\n}\n\nexport default { createUser, createBoard, getUserBoards, getUserInfo, getAllBoards, updateBoard, addMovieToBoard, updateUser, deleteBoard }\n","/Users/cyrie/Documents/dev/Smovies/src/helpers/movieDatabase.js",[],"/Users/cyrie/Documents/dev/Smovies/src/tools/stringSearch.js",["142","143","144"],"export function damerauLevenshteinDistance(str1, str2) {\n    if (str1 == null) {\n        return str2.length\n    } else if (str2 == null) {\n        return str1.length\n    } else {\n        var d = []\n        for (var i = 0; i <= str1.length; i++) {\n            var list = []\n            for (var j = 0; j <= str2.length; j++) {\n                list.push(0)\n            }\n            d.push(list)\n        }\n        for (var i = 0; i <= str1.length; i++) {\n            d[i][0] = i\n            for (var j = 0; j <= str2.length; j++) {\n                d[0][j] = j\n            }\n        }\n\n        for (var i = 1; i <= str1.length; i++) {\n            var cost = 0\n            for (let j = 1; j <= str2.length; j++) {\n                if (str1.charAt(i - 1) === str2.charAt(j - 1)) {\n                    cost = 0;\n                } else {\n                    cost = 1;\n                }\n                d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost)\n\n                if (i > 1 && j > 1 && str1[i - 1] === str2[j - 2] && str1[i - 2] === str2[j - 1]) {\n                    d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost)\n                }\n            }\n        }\n        return d[str1.length][str2.length];\n    }\n}\n\n","/Users/cyrie/Documents/dev/Smovies/src/helpers/auth.js",[],"/Users/cyrie/Documents/dev/Smovies/src/reusable-components/ActorView.js",["145"],"\nexport default function ActorView({ name,posterPath, ...props }) {\n    return (\n      <div\n        style={{\n          flexWrap: 'wrap',\n          width: 156,\n          height: 210,\n          fontFamily: 'Poppins',\n          fontSize: 15,\n          filter:\"drop-shadow(0px 4px 10px rgba(255, 255, 255, 0.05))\",\n        }}\n      >\n        <div style={{ width: '100%', height: 180, backgroundColor: 'grey', borderRadius:\"14px 14px 0px 0px\", }}>\n          {posterPath != null  &&\n          <img\n            src={'https://image.tmdb.org/t/p/original' + posterPath}\n            width={'100%'}\n            height={'100%'}\n            style={{ objectFit: 'cover', objectPosition: '100% 0', borderRadius:\"14px 14px 0px 0px\" }}\n          />}\n          {posterPath == null &&\n          <div style={{height:180, width:\"100%\", paddingTop: 80, textAlign:\"center\"}}> Oops! No poster 😔</div>}\n        </div>\n        <div\n          style={{\n            backgroundColor: '#414141',\n            display: 'flex',\n            flexDirection: 'row',\n            width: '100%',\n            height: 30,\n            color: 'white',\n            borderRadius: '0px 0px 14px 14px'\n          }}\n        >\n          <div style={{paddingLeft: 5 }}>{name}</div>\n        </div>\n      </div>\n    )\n  }",{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":5,"column":3,"nodeType":"152","messageId":"153","endLine":7,"endColumn":4},{"ruleId":"150","severity":1,"message":"151","line":5,"column":3,"nodeType":"152","messageId":"153","endLine":7,"endColumn":4},{"ruleId":"154","severity":1,"message":"155","line":17,"column":35,"nodeType":"156","messageId":"157","endLine":17,"endColumn":36},{"ruleId":"154","severity":1,"message":"155","line":17,"column":51,"nodeType":"156","messageId":"157","endLine":17,"endColumn":52},{"ruleId":"150","severity":1,"message":"151","line":5,"column":3,"nodeType":"152","messageId":"153","endLine":7,"endColumn":4},{"ruleId":"150","severity":1,"message":"151","line":5,"column":3,"nodeType":"152","messageId":"153","endLine":7,"endColumn":4},{"ruleId":"158","severity":1,"message":"159","line":6,"column":9,"nodeType":"160","messageId":"161","endLine":6,"endColumn":15},{"ruleId":"158","severity":1,"message":"162","line":7,"column":9,"nodeType":"160","messageId":"161","endLine":7,"endColumn":20},{"ruleId":"150","severity":1,"message":"151","line":5,"column":3,"nodeType":"152","messageId":"153","endLine":7,"endColumn":4},{"ruleId":"154","severity":1,"message":"155","line":79,"column":35,"nodeType":"156","messageId":"157","endLine":79,"endColumn":36},{"ruleId":"154","severity":1,"message":"155","line":79,"column":51,"nodeType":"156","messageId":"157","endLine":79,"endColumn":52},{"ruleId":"154","severity":1,"message":"155","line":45,"column":35,"nodeType":"156","messageId":"157","endLine":45,"endColumn":36},{"ruleId":"154","severity":1,"message":"155","line":45,"column":51,"nodeType":"156","messageId":"157","endLine":45,"endColumn":52},{"ruleId":"158","severity":1,"message":"163","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":25},{"ruleId":"158","severity":1,"message":"164","line":2,"column":27,"nodeType":"160","messageId":"161","endLine":2,"endColumn":40},{"ruleId":"158","severity":1,"message":"165","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":14},{"ruleId":"158","severity":1,"message":"166","line":3,"column":16,"nodeType":"160","messageId":"161","endLine":3,"endColumn":24},{"ruleId":"158","severity":1,"message":"167","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":20},{"ruleId":"158","severity":1,"message":"168","line":5,"column":10,"nodeType":"160","messageId":"161","endLine":5,"endColumn":25},{"ruleId":"158","severity":1,"message":"169","line":7,"column":7,"nodeType":"160","messageId":"161","endLine":7,"endColumn":12},{"ruleId":"170","severity":1,"message":"171","line":8,"column":19,"nodeType":"156","messageId":"172","endLine":8,"endColumn":21},{"ruleId":"173","severity":1,"message":"174","line":34,"column":19,"nodeType":"175","endLine":39,"endColumn":21},{"ruleId":"173","severity":1,"message":"174","line":21,"column":9,"nodeType":"175","endLine":26,"endColumn":11},{"ruleId":"173","severity":1,"message":"174","line":36,"column":11,"nodeType":"175","endLine":41,"endColumn":13},{"ruleId":"170","severity":1,"message":"176","line":48,"column":46,"nodeType":"156","messageId":"172","endLine":48,"endColumn":48},{"ruleId":"170","severity":1,"message":"176","line":53,"column":30,"nodeType":"156","messageId":"172","endLine":53,"endColumn":32},{"ruleId":"170","severity":1,"message":"171","line":74,"column":42,"nodeType":"156","messageId":"172","endLine":74,"endColumn":44},{"ruleId":"170","severity":1,"message":"171","line":123,"column":17,"nodeType":"156","messageId":"172","endLine":123,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":143,"column":1,"nodeType":"179","endLine":143,"endColumn":140},{"ruleId":"180","severity":1,"message":"181","line":15,"column":18,"nodeType":"160","messageId":"182","endLine":15,"endColumn":19},{"ruleId":"180","severity":1,"message":"183","line":17,"column":22,"nodeType":"160","messageId":"182","endLine":17,"endColumn":23},{"ruleId":"180","severity":1,"message":"181","line":22,"column":18,"nodeType":"160","messageId":"182","endLine":22,"endColumn":19},{"ruleId":"173","severity":1,"message":"174","line":16,"column":11,"nodeType":"175","endLine":21,"endColumn":13},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'userId' is assigned a value but never used.","Identifier","unusedVar","'pictureLink' is assigned a value but never used.","'getBoardPosters' is defined but never used.","'getMoviesInfo' is defined but never used.","'auth' is defined but never used.","'database' is defined but never used.","'ReactLoading' is defined but never used.","'addMovieToBoard' is defined but never used.","'axios' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '===' and instead saw '=='.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-redeclare","'i' is already defined.","redeclared","'j' is already defined.","no-global-assign","no-unsafe-negation"]